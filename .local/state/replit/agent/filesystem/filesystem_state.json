{"file_contents":{"README.md":{"content":"# Here are your Instructions\n","size_bytes":29},"backend_test.py":{"content":"import requests\nimport sys\nimport json\nfrom datetime import datetime\n\nclass CognitiveArenaAPITester:\n    def __init__(self, base_url=\"https://cognition-arena.preview.emergentagent.com/api\"):\n        self.base_url = base_url\n        self.token = None\n        self.user_id = None\n        self.tests_run = 0\n        self.tests_passed = 0\n        self.test_username = f\"test_user_{datetime.now().strftime('%H%M%S')}\"\n        self.test_email = f\"test_{datetime.now().strftime('%H%M%S')}@example.com\"\n        self.test_password = \"TestPass123!\"\n\n    def run_test(self, name, method, endpoint, expected_status, data=None, headers=None):\n        \"\"\"Run a single API test\"\"\"\n        url = f\"{self.base_url}/{endpoint}\"\n        test_headers = {'Content-Type': 'application/json'}\n        \n        if self.token:\n            test_headers['Authorization'] = f'Bearer {self.token}'\n        \n        if headers:\n            test_headers.update(headers)\n\n        self.tests_run += 1\n        print(f\"\\nüîç Testing {name}...\")\n        print(f\"   URL: {url}\")\n        \n        try:\n            if method == 'GET':\n                response = requests.get(url, headers=test_headers, timeout=10)\n            elif method == 'POST':\n                response = requests.post(url, json=data, headers=test_headers, timeout=10)\n            elif method == 'PUT':\n                response = requests.put(url, json=data, headers=test_headers, timeout=10)\n            elif method == 'DELETE':\n                response = requests.delete(url, headers=test_headers, timeout=10)\n\n            success = response.status_code == expected_status\n            if success:\n                self.tests_passed += 1\n                print(f\"‚úÖ Passed - Status: {response.status_code}\")\n                try:\n                    response_data = response.json()\n                    print(f\"   Response: {json.dumps(response_data, indent=2)[:200]}...\")\n                    return True, response_data\n                except:\n                    return True, {}\n            else:\n                print(f\"‚ùå Failed - Expected {expected_status}, got {response.status_code}\")\n                try:\n                    error_data = response.json()\n                    print(f\"   Error: {error_data}\")\n                except:\n                    print(f\"   Error: {response.text}\")\n                return False, {}\n\n        except Exception as e:\n            print(f\"‚ùå Failed - Error: {str(e)}\")\n            return False, {}\n\n    def test_root_endpoint(self):\n        \"\"\"Test root API endpoint\"\"\"\n        return self.run_test(\"Root Endpoint\", \"GET\", \"\", 200)\n\n    def test_user_registration(self):\n        \"\"\"Test user registration\"\"\"\n        success, response = self.run_test(\n            \"User Registration\",\n            \"POST\",\n            \"auth/register\",\n            200,\n            data={\n                \"username\": self.test_username,\n                \"email\": self.test_email,\n                \"password\": self.test_password\n            }\n        )\n        \n        if success and 'token' in response:\n            self.token = response['token']\n            if 'user' in response:\n                self.user_id = response['user'].get('id')\n            print(f\"   Token obtained: {self.token[:20]}...\")\n            return True\n        return False\n\n    def test_user_login(self):\n        \"\"\"Test user login\"\"\"\n        success, response = self.run_test(\n            \"User Login\",\n            \"POST\", \n            \"auth/login\",\n            200,\n            data={\n                \"username\": self.test_username,\n                \"password\": self.test_password\n            }\n        )\n        \n        if success and 'token' in response:\n            self.token = response['token']\n            if 'user' in response:\n                self.user_id = response['user'].get('id')\n            print(f\"   Login token: {self.token[:20]}...\")\n            return True\n        return False\n\n    def test_get_current_user(self):\n        \"\"\"Test getting current user profile\"\"\"\n        if not self.token:\n            print(\"‚ùå No token available for authentication test\")\n            return False\n            \n        return self.run_test(\"Get Current User\", \"GET\", \"auth/me\", 200)[0]\n\n    def test_ai_image_game_data(self):\n        \"\"\"Test AI Image game data endpoint\"\"\"\n        if not self.token:\n            print(\"‚ùå No token available for AI Image game data test\")\n            return False\n            \n        success, response = self.run_test(\"AI Image Game Data\", \"GET\", \"games/ai-image/data\", 200)\n        \n        if success and 'images' in response:\n            images = response['images']\n            print(f\"   Retrieved {len(images)} images\")\n            for img in images:\n                print(f\"   - Image {img.get('id')}: {img.get('description')} (AI: {img.get('is_ai')})\")\n            return True\n        return False\n\n    def test_text_ai_game_data(self):\n        \"\"\"Test Text AI game data endpoint\"\"\"\n        if not self.token:\n            print(\"‚ùå No token available for Text AI game data test\")\n            return False\n            \n        success, response = self.run_test(\"Text AI Game Data\", \"GET\", \"games/text-ai/data\", 200)\n        \n        if success and 'texts' in response:\n            texts = response['texts']\n            print(f\"   Retrieved {len(texts)} texts\")\n            for text in texts:\n                print(f\"   - Text {text.get('id')}: AI={text.get('is_ai')}\")\n            return True\n        return False\n\n    def test_memory_game_data(self):\n        \"\"\"Test Memory game data endpoint\"\"\"\n        if not self.token:\n            print(\"‚ùå No token available for Memory game data test\")\n            return False\n            \n        success, response = self.run_test(\"Memory Game Data\", \"GET\", \"games/memory/data?difficulty=1\", 200)\n        \n        if success and 'sequence' in response:\n            sequence = response['sequence']\n            difficulty = response.get('difficulty', 1)\n            print(f\"   Retrieved sequence of length {len(sequence)} for difficulty {difficulty}\")\n            print(f\"   Sequence: {sequence}\")\n            return True\n        return False\n\n    def test_submit_game_score(self):\n        \"\"\"Test submitting a game score\"\"\"\n        if not self.token:\n            print(\"‚ùå No token available for score submission test\")\n            return False\n            \n        test_score_data = {\n            \"game_type\": \"ai_image\",\n            \"score\": 850,\n            \"accuracy\": 85.0,\n            \"time_taken\": 120\n        }\n        \n        success, response = self.run_test(\n            \"Submit Game Score\",\n            \"POST\",\n            \"games/score\",\n            200,\n            data=test_score_data\n        )\n        \n        if success:\n            print(f\"   Your score: {response.get('your_score')}\")\n            print(f\"   AI baseline: {response.get('ai_baseline')}\")\n            print(f\"   Performance: {response.get('performance')}\")\n            return True\n        return False\n\n    def test_leaderboard(self):\n        \"\"\"Test leaderboard endpoint\"\"\"\n        success, response = self.run_test(\"Leaderboard\", \"GET\", \"leaderboard\", 200)\n        \n        if success:\n            human_leaders = response.get('human_leaders', [])\n            ai_baselines = response.get('ai_baselines', [])\n            print(f\"   Human leaders: {len(human_leaders)}\")\n            print(f\"   AI baselines: {len(ai_baselines)}\")\n            \n            for ai in ai_baselines:\n                print(f\"   - {ai.get('name')}: {ai.get('total_score')} points\")\n            return True\n        return False\n\n    def test_user_stats(self):\n        \"\"\"Test user stats endpoint\"\"\"\n        if not self.token:\n            print(\"‚ùå No token available for user stats test\")\n            return False\n            \n        success, response = self.run_test(\"User Stats\", \"GET\", \"stats/user\", 200)\n        \n        if success:\n            user_stats = response.get('user_stats', {})\n            total_games = response.get('total_games', 0)\n            print(f\"   Total games played: {total_games}\")\n            \n            for game_type, stats in user_stats.items():\n                print(f\"   {game_type}: {stats.get('games_played')} games, {stats.get('best_score')} best score\")\n            return True\n        return False\n\n    def run_all_tests(self):\n        \"\"\"Run all API tests\"\"\"\n        print(\"üöÄ Starting Cognitive Arena API Tests\")\n        print(f\"Testing against: {self.base_url}\")\n        print(\"=\" * 60)\n\n        # Test basic connectivity\n        if not self.test_root_endpoint():\n            print(\"‚ùå Root endpoint failed, stopping tests\")\n            return False\n\n        # Test authentication flow\n        if not self.test_user_registration():\n            print(\"‚ùå User registration failed, stopping tests\")\n            return False\n\n        if not self.test_get_current_user():\n            print(\"‚ùå Get current user failed\")\n            return False\n\n        # Test game data endpoints\n        if not self.test_ai_image_game_data():\n            print(\"‚ùå AI Image game data failed\")\n\n        if not self.test_text_ai_game_data():\n            print(\"‚ùå Text AI game data failed\")\n\n        if not self.test_memory_game_data():\n            print(\"‚ùå Memory game data failed\")\n\n        # Test score submission\n        if not self.test_submit_game_score():\n            print(\"‚ùå Score submission failed\")\n\n        # Test leaderboard and stats\n        if not self.test_leaderboard():\n            print(\"‚ùå Leaderboard failed\")\n\n        if not self.test_user_stats():\n            print(\"‚ùå User stats failed\")\n\n        # Print final results\n        print(\"\\n\" + \"=\" * 60)\n        print(f\"üìä Final Results: {self.tests_passed}/{self.tests_run} tests passed\")\n        \n        if self.tests_passed == self.tests_run:\n            print(\"üéâ All tests passed!\")\n            return True\n        else:\n            print(f\"‚ö†Ô∏è  {self.tests_run - self.tests_passed} tests failed\")\n            return False\n\ndef main():\n    tester = CognitiveArenaAPITester()\n    success = tester.run_all_tests()\n    return 0 if success else 1\n\nif __name__ == \"__main__\":\n    sys.exit(main())","size_bytes":10189},"replit.md":{"content":"# Overview\n\nThis is a full-stack AI Cognitive Platform application that allows users to test their cognitive abilities against AI systems through interactive games. The platform features three main games: AI Image Detection (distinguishing between AI-generated and real images), Text AI Detection (identifying AI-written versus human-written text), and Memory Challenge (sequence recall). The application includes a leaderboard system to compare human performance against AI baselines and provides user statistics tracking.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe frontend is built with React 18+ using Create React App as the foundation. It follows a component-based architecture with:\n\n- **UI Framework**: React with React Router DOM for client-side routing\n- **Styling**: Tailwind CSS for utility-first styling combined with custom CSS for specialized animations and landing page effects\n- **Component Library**: Radix UI components integrated with shadcn/ui for consistent, accessible UI elements\n- **State Management**: React Context API for user authentication state and local component state for game logic\n- **HTTP Client**: Axios for API communication with the backend\n- **Development Tools**: CRACO for webpack configuration customization, PostCSS for CSS processing\n\nThe frontend implements a guest-first approach where users can play games without authentication, with the auth system designed but currently disabled.\n\n## Backend Architecture\nThe backend uses FastAPI as the web framework with two database implementation options:\n\n- **Primary Implementation**: SQLite with aiosqlite for local development and testing\n- **Alternative Implementation**: MongoDB with Motor (async driver) for production deployments\n- **API Design**: RESTful API with `/api` prefix routing\n- **Authentication**: JWT-based authentication system with bcrypt password hashing\n- **Security**: HTTPBearer token authentication with configurable auto-error handling\n\nThe backend follows a modular design with separate routers and implements proper CORS middleware for cross-origin requests.\n\n## Data Storage Solutions\nThe application supports dual database strategies:\n\n- **SQLite Database**: Lightweight, file-based storage using aiosqlite for async operations, ideal for development and single-instance deployments\n- **MongoDB Database**: NoSQL document database using Motor async driver for scalable production deployments\n\nBoth implementations maintain the same API interface, allowing seamless switching between storage backends.\n\n## Game Engine Architecture\nEach game implements a standardized pattern:\n\n- **Data Fetching**: REST endpoints serve game content (images, text, sequences)\n- **State Management**: Local React state handles game progression, scoring, and timing\n- **Result Submission**: Async API calls submit game results for scoring and leaderboard updates\n- **Timer System**: Client-side countdown timers with automatic submission on timeout\n\n# External Dependencies\n\n## Frontend Dependencies\n- **UI/Styling**: Tailwind CSS, Radix UI components, Lucide React icons\n- **Routing**: React Router DOM for single-page application navigation\n- **HTTP**: Axios for API communication\n- **Build Tools**: React Scripts, CRACO for build customization\n- **Forms**: React Hook Form with Hookform Resolvers for form validation\n\n## Backend Dependencies\n- **Web Framework**: FastAPI for API development, Uvicorn for ASGI server\n- **Database**: aiosqlite for SQLite async operations, Motor for MongoDB async operations\n- **Authentication**: PyJWT for token generation, Passlib with bcrypt for password hashing\n- **Validation**: Pydantic for request/response validation and serialization\n- **Environment**: python-dotenv for environment variable management\n- **Development**: pytest for testing, black/isort/flake8 for code formatting and linting\n\n## Infrastructure Dependencies\n- **Database Options**: SQLite (file-based) or MongoDB (cloud/self-hosted)\n- **Environment Variables**: JWT secrets, database URLs, and configuration settings\n- **CORS Configuration**: Allows cross-origin requests for frontend-backend communication\n\n## Game Content Dependencies\nThe platform requires external content sources for games:\n- **AI Image Detection**: Real and AI-generated image datasets\n- **Text AI Detection**: Human and AI-written text samples\n- **Memory Challenge**: Algorithmically generated number sequences\n\nThe backend serves this content through dedicated game endpoints, allowing for dynamic content updates without frontend changes.","size_bytes":4613},"test_result.md":{"content":"#====================================================================================================\n# START - Testing Protocol - DO NOT EDIT OR REMOVE THIS SECTION\n#====================================================================================================\n\n# THIS SECTION CONTAINS CRITICAL TESTING INSTRUCTIONS FOR BOTH AGENTS\n# BOTH MAIN_AGENT AND TESTING_AGENT MUST PRESERVE THIS ENTIRE BLOCK\n\n# Communication Protocol:\n# If the `testing_agent` is available, main agent should delegate all testing tasks to it.\n#\n# You have access to a file called `test_result.md`. This file contains the complete testing state\n# and history, and is the primary means of communication between main and the testing agent.\n#\n# Main and testing agents must follow this exact format to maintain testing data. \n# The testing data must be entered in yaml format Below is the data structure:\n# \n## user_problem_statement: {problem_statement}\n## backend:\n##   - task: \"Task name\"\n##     implemented: true\n##     working: true  # or false or \"NA\"\n##     file: \"file_path.py\"\n##     stuck_count: 0\n##     priority: \"high\"  # or \"medium\" or \"low\"\n##     needs_retesting: false\n##     status_history:\n##         -working: true  # or false or \"NA\"\n##         -agent: \"main\"  # or \"testing\" or \"user\"\n##         -comment: \"Detailed comment about status\"\n##\n## frontend:\n##   - task: \"Task name\"\n##     implemented: true\n##     working: true  # or false or \"NA\"\n##     file: \"file_path.js\"\n##     stuck_count: 0\n##     priority: \"high\"  # or \"medium\" or \"low\"\n##     needs_retesting: false\n##     status_history:\n##         -working: true  # or false or \"NA\"\n##         -agent: \"main\"  # or \"testing\" or \"user\"\n##         -comment: \"Detailed comment about status\"\n##\n## metadata:\n##   created_by: \"main_agent\"\n##   version: \"1.0\"\n##   test_sequence: 0\n##   run_ui: false\n##\n## test_plan:\n##   current_focus:\n##     - \"Task name 1\"\n##     - \"Task name 2\"\n##   stuck_tasks:\n##     - \"Task name with persistent issues\"\n##   test_all: false\n##   test_priority: \"high_first\"  # or \"sequential\" or \"stuck_first\"\n##\n## agent_communication:\n##     -agent: \"main\"  # or \"testing\" or \"user\"\n##     -message: \"Communication message between agents\"\n\n# Protocol Guidelines for Main agent\n#\n# 1. Update Test Result File Before Testing:\n#    - Main agent must always update the `test_result.md` file before calling the testing agent\n#    - Add implementation details to the status_history\n#    - Set `needs_retesting` to true for tasks that need testing\n#    - Update the `test_plan` section to guide testing priorities\n#    - Add a message to `agent_communication` explaining what you've done\n#\n# 2. Incorporate User Feedback:\n#    - When a user provides feedback that something is or isn't working, add this information to the relevant task's status_history\n#    - Update the working status based on user feedback\n#    - If a user reports an issue with a task that was marked as working, increment the stuck_count\n#    - Whenever user reports issue in the app, if we have testing agent and task_result.md file so find the appropriate task for that and append in status_history of that task to contain the user concern and problem as well \n#\n# 3. Track Stuck Tasks:\n#    - Monitor which tasks have high stuck_count values or where you are fixing same issue again and again, analyze that when you read task_result.md\n#    - For persistent issues, use websearch tool to find solutions\n#    - Pay special attention to tasks in the stuck_tasks list\n#    - When you fix an issue with a stuck task, don't reset the stuck_count until the testing agent confirms it's working\n#\n# 4. Provide Context to Testing Agent:\n#    - When calling the testing agent, provide clear instructions about:\n#      - Which tasks need testing (reference the test_plan)\n#      - Any authentication details or configuration needed\n#      - Specific test scenarios to focus on\n#      - Any known issues or edge cases to verify\n#\n# 5. Call the testing agent with specific instructions referring to test_result.md\n#\n# IMPORTANT: Main agent must ALWAYS update test_result.md BEFORE calling the testing agent, as it relies on this file to understand what to test next.\n\n#====================================================================================================\n# END - Testing Protocol - DO NOT EDIT OR REMOVE THIS SECTION\n#====================================================================================================\n\n\n\n#====================================================================================================\n# Testing Data - Main Agent and testing sub agent both should log testing data below this section\n#====================================================================================================","size_bytes":4774},"backend/server.py":{"content":"from fastapi import FastAPI, APIRouter, HTTPException, Depends, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom dotenv import load_dotenv\nfrom starlette.middleware.cors import CORSMiddleware\nimport aiosqlite\nimport os\nimport logging\nfrom pathlib import Path\nfrom pydantic import BaseModel, Field, EmailStr\nfrom typing import List, Optional, Dict, Any\nimport uuid\nfrom datetime import datetime, timedelta, timezone\nimport jwt\nimport bcrypt\nimport random\nimport json\n\nROOT_DIR = Path(__file__).parent\nload_dotenv(ROOT_DIR / '.env')\n\n# Database setup\nDATABASE_PATH = ROOT_DIR / os.environ.get('DB_NAME', 'cognitive_arena.db')\n\n# JWT Settings\nJWT_SECRET = os.environ.get('JWT_SECRET', 'your-secret-key-change-in-production')\nJWT_ALGORITHM = 'HS256'\nJWT_EXPIRATION_HOURS = 24\n\n# Security\nsecurity = HTTPBearer(auto_error=False)\n\n# Create the main app\napp = FastAPI(title=\"AI Cognitive Platform API\")\n\n@app.get(\"/\")\nasync def home():\n    return {\"message\": \"Welcome to AI Cognitive Platform API!\"}\n\n# Create a router with the /api prefix\napi_router = APIRouter(prefix=\"/api\")\n\n# Models\nclass User(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))\n    username: str\n    email: EmailStr\n    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))\n    total_games_played: int = Field(default=0)\n    total_score: int = Field(default=0)\n\nclass UserCreate(BaseModel):\n    username: str\n    email: EmailStr\n    password: str\n\nclass UserLogin(BaseModel):\n    username: str\n    password: str\n\nclass GameScore(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str\n    game_type: str  # 'ai_image', 'text_ai', 'memory_challenge'\n    score: int\n    accuracy: float\n    time_taken: int  # seconds\n    ai_baseline_score: int\n    ai_baseline_accuracy: float\n    timestamp: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))\n\nclass GameScoreCreate(BaseModel):\n    game_type: str\n    score: int\n    accuracy: float\n    time_taken: int\n\n# Database initialization\nasync def init_database():\n    async with aiosqlite.connect(DATABASE_PATH) as db:\n        # Create users table\n        await db.execute('''\n            CREATE TABLE IF NOT EXISTS users (\n                id TEXT PRIMARY KEY,\n                username TEXT UNIQUE NOT NULL,\n                email TEXT UNIQUE NOT NULL,\n                password TEXT NOT NULL,\n                created_at TEXT NOT NULL,\n                total_games_played INTEGER DEFAULT 0,\n                total_score INTEGER DEFAULT 0\n            )\n        ''')\n        \n        # Create game_scores table\n        await db.execute('''\n            CREATE TABLE IF NOT EXISTS game_scores (\n                id TEXT PRIMARY KEY,\n                user_id TEXT NOT NULL,\n                game_type TEXT NOT NULL,\n                score INTEGER NOT NULL,\n                accuracy REAL NOT NULL,\n                time_taken INTEGER NOT NULL,\n                ai_baseline_score INTEGER NOT NULL,\n                ai_baseline_accuracy REAL NOT NULL,\n                timestamp TEXT NOT NULL,\n                FOREIGN KEY (user_id) REFERENCES users (id)\n            )\n        ''')\n        \n        # Create a guest user if it doesn't exist\n        await db.execute('''\n            INSERT OR IGNORE INTO users (id, username, email, password, created_at)\n            VALUES ('guest', 'Guest', 'guest@example.com', '', ?)\n        ''', (datetime.now(timezone.utc).isoformat(),))\n        \n        await db.commit()\n\n# Authentication helpers\ndef hash_password(password: str) -> str:\n    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')\n\ndef verify_password(password: str, hashed: str) -> bool:\n    return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))\n\ndef create_jwt_token(user_id: str, username: str) -> str:\n    payload = {\n        'user_id': user_id,\n        'username': username,\n        'exp': datetime.now(timezone.utc) + timedelta(hours=JWT_EXPIRATION_HOURS)\n    }\n    return jwt.encode(payload, JWT_SECRET, algorithm=JWT_ALGORITHM)\n\nasync def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):\n    # If no credentials are provided, return the default Guest user\n    if credentials is None:\n        async with aiosqlite.connect(DATABASE_PATH) as db:\n            async with db.execute('SELECT * FROM users WHERE id = ?', ('guest',)) as cursor:\n                row = await cursor.fetchone()\n                if row:\n                    return User(\n                        id=row[0], username=row[1], email=row[2],\n                        created_at=datetime.fromisoformat(row[4]),\n                        total_games_played=row[5], total_score=row[6]\n                    )\n\n    try:\n        payload = jwt.decode(credentials.credentials, JWT_SECRET, algorithms=[JWT_ALGORITHM])\n        user_id = payload.get('user_id')\n        if user_id is None:\n            raise HTTPException(status_code=401, detail=\"Invalid token\")\n        \n        async with aiosqlite.connect(DATABASE_PATH) as db:\n            async with db.execute('SELECT * FROM users WHERE id = ?', (user_id,)) as cursor:\n                row = await cursor.fetchone()\n                if row is None:\n                    raise HTTPException(status_code=401, detail=\"User not found\")\n                \n                return User(\n                    id=row[0], username=row[1], email=row[2],\n                    created_at=datetime.fromisoformat(row[4]),\n                    total_games_played=row[5], total_score=row[6]\n                )\n    except jwt.ExpiredSignatureError:\n        raise HTTPException(status_code=401, detail=\"Token expired\")\n    except jwt.JWTError:\n        raise HTTPException(status_code=401, detail=\"Invalid token\")\n\n# AI Baseline Data (Simulated for MVP)\nAI_BASELINES = {\n    'ai_image': {\n        'accuracy': 92.5,\n        'average_time': 3.2,\n        'score_multiplier': 100\n    },\n    'text_ai': {\n        'accuracy': 88.7,\n        'average_time': 5.1,\n        'score_multiplier': 100\n    },\n    'memory_challenge': {\n        'accuracy': 78.3,\n        'average_time': 12.5,\n        'score_multiplier': 100\n    }\n}\n\n# Game Data (Simulated for MVP)\ndef get_ai_image_game_data():\n    \"\"\"Generate AI Image vs Real Image game data\"\"\"\n    images = [\n        {\n            \"id\": 1,\n            \"url\": \"https://images.unsplash.com/photo-1673255745677-e36f618550d1?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NDQ2MzR8MHwxfHNlYXJjaHwxfHxBSSUyMGJyYWluJTIwdGVjaG5vbG9neXxlbnwwfHx8fDE3NTY5ODExODV8MA&ixlib=rb-4.1.0&q=85\",\n            \"is_ai\": True,\n            \"description\": \"Futuristic AI Robot\"\n        },\n        {\n            \"id\": 2,\n            \"url\": \"https://images.unsplash.com/photo-1549925245-f20a1bac6454?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NDQ2MzR8MHwxfHNlYXJjaHwyfHxBSSUyMGJyYWluJTIwdGVjaG5vbG9neXxlbnwwfHx8fDE3NTY5ODExODV8MA&ixlib=rb-4.1.0&q=85\",\n            \"is_ai\": False, \n            \"description\": \"Brain Visualization\"\n        },\n        {\n            \"id\": 3,\n            \"url\": \"https://images.pexels.com/photos/8438864/pexels-photo-8438864.jpeg\",\n            \"is_ai\": False,\n            \"description\": \"Robot Playing Chess\"\n        },\n        {\n            \"id\": 4,\n            \"url\": \"https://images.pexels.com/photos/8438954/pexels-photo-8438954.jpeg\", \n            \"is_ai\": False,\n            \"description\": \"AI vs Human Chess Match\"\n        },\n        {\n            \"id\": 5,\n            \"url\": \"https://images.unsplash.com/photo-1677442136019-21780ecad995?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NDQ2MzR8MHwxfHNlYXJjaHw1fHxBSSUyMGJyYWluJTIwdGVjaG5vbG9neXxlbnwwfHx8fDE3NTY5ODExODV8MA&ixlib=rb-4.1.0&q=85\",\n            \"is_ai\": True,\n            \"description\": \"AI Technology\"\n        }\n    ]\n    return random.sample(images, 3)\n\ndef get_text_ai_game_data():\n    \"\"\"Generate Text vs AI game data\"\"\"\n    texts = [\n        {\n            \"id\": 1,\n            \"text\": \"The sun dipped below the horizon, painting the sky in brilliant shades of orange and pink. Sarah watched from her window, lost in the beauty of the moment.\",\n            \"is_ai\": False,\n            \"source\": \"Human Writer\"\n        },\n        {\n            \"id\": 2,\n            \"text\": \"As an AI language model, I can assist you in generating content that meets your specific requirements. However, it's important to note that the effectiveness of this approach may vary depending on various factors.\",\n            \"is_ai\": True,\n            \"source\": \"AI Generated\"\n        },\n        {\n            \"id\": 3, \n            \"text\": \"Innovation thrives at the intersection of creativity and technology. When human imagination meets computational power, extraordinary possibilities emerge from the synthesis.\",\n            \"is_ai\": True,\n            \"source\": \"AI Generated\"\n        },\n        {\n            \"id\": 4,\n            \"text\": \"I remember my grandmother's kitchen always smelled like cinnamon and fresh bread. She'd tell us stories about her childhood while we helped her knead dough for Sunday dinner.\",\n            \"is_ai\": False,\n            \"source\": \"Human Writer\"\n        }\n    ]\n    return random.sample(texts, 3)\n\ndef get_memory_game_data(difficulty: int = 1):\n    \"\"\"Generate Memory Challenge game data\"\"\"\n    sequence_length = 4 + (difficulty * 2)  # Start with 4, increase by 2 per difficulty\n    sequence = [random.randint(1, 9) for _ in range(sequence_length)]\n    return {\"sequence\": sequence, \"difficulty\": difficulty}\n\n# New Game Functions\ndef generate_logical_puzzle(difficulty: int = 1):\n    \"\"\"Generate logical reasoning puzzles\"\"\"\n    puzzle_types = ['number_sequence', 'pattern_matching', 'logic_grid']\n    puzzle_type = random.choice(puzzle_types)\n    \n    if puzzle_type == 'number_sequence':\n        # Generate arithmetic or geometric sequences\n        if random.choice([True, False]):\n            # Arithmetic sequence\n            start = random.randint(1, 10)\n            diff = random.randint(2, 8)\n            sequence = [start + i * diff for i in range(5)]\n            answer = sequence[-1] + diff\n            question = f\"What is the next number in this sequence: {', '.join(map(str, sequence[:-1]))}?\"\n        else:\n            # Geometric sequence\n            start = random.randint(2, 5)\n            ratio = random.randint(2, 3)\n            sequence = [start * (ratio ** i) for i in range(4)]\n            answer = sequence[-1] * ratio\n            question = f\"What is the next number in this sequence: {', '.join(map(str, sequence))}?\"\n        \n        return {\n            \"id\": str(uuid.uuid4()),\n            \"type\": \"number_sequence\",\n            \"question\": question,\n            \"answer\": answer,\n            \"difficulty\": difficulty\n        }\n    \n    elif puzzle_type == 'pattern_matching':\n        # Simple pattern matching\n        patterns = [\n            {\"pattern\": \"ABAB\", \"next\": \"A\", \"options\": [\"A\", \"B\", \"C\", \"D\"]},\n            {\"pattern\": \"AABB\", \"next\": \"A\", \"options\": [\"A\", \"B\", \"C\", \"D\"]},\n            {\"pattern\": \"ABCD\", \"next\": \"A\", \"options\": [\"A\", \"B\", \"C\", \"D\"]},\n        ]\n        pattern_data = random.choice(patterns)\n        return {\n            \"id\": str(uuid.uuid4()),\n            \"type\": \"pattern_matching\",\n            \"question\": f\"What comes next in this pattern: {pattern_data['pattern']}?\",\n            \"pattern\": pattern_data[\"pattern\"],\n            \"answer\": pattern_data[\"next\"],\n            \"options\": pattern_data[\"options\"],\n            \"difficulty\": difficulty\n        }\n    \n    else:  # logic_grid\n        # Simple logic puzzle\n        logic_puzzles = [\n            {\n                \"question\": \"If all cats are animals, and some animals are pets, which statement is true?\",\n                \"options\": [\"All cats are pets\", \"Some cats are pets\", \"No cats are pets\", \"Cannot be determined\"],\n                \"answer\": \"Cannot be determined\"\n            },\n            {\n                \"question\": \"In a race, if Alice finishes before Bob, and Bob finishes before Charlie, who finishes first?\",\n                \"options\": [\"Alice\", \"Bob\", \"Charlie\", \"Cannot be determined\"],\n                \"answer\": \"Alice\"\n            }\n        ]\n        puzzle = random.choice(logic_puzzles)\n        return {\n            \"id\": str(uuid.uuid4()),\n            \"type\": \"logic_grid\",\n            \"question\": puzzle[\"question\"],\n            \"options\": puzzle[\"options\"],\n            \"answer\": puzzle[\"answer\"],\n            \"difficulty\": difficulty\n        }\n\ndef solve_logical_puzzle_ai(puzzle_data):\n    \"\"\"AI solver for logical puzzles\"\"\"\n    # Simple AI logic - in a real implementation, this could be more sophisticated\n    if puzzle_data[\"type\"] == \"number_sequence\":\n        # AI correctly solves number sequences with high accuracy\n        return {\"ai_answer\": puzzle_data[\"answer\"], \"ai_confidence\": 0.95}\n    elif puzzle_data[\"type\"] == \"pattern_matching\":\n        # AI has good pattern recognition\n        return {\"ai_answer\": puzzle_data[\"answer\"], \"ai_confidence\": 0.90}\n    else:  # logic_grid\n        # AI has strong logical reasoning\n        return {\"ai_answer\": puzzle_data[\"answer\"], \"ai_confidence\": 0.92}\n\ndef get_creative_writing_prompts():\n    \"\"\"Generate creative writing prompts\"\"\"\n    prompts = [\n        \"Write a short story about a time traveler who can only move forward one day at a time.\",\n        \"Describe a world where colors have disappeared and one person can still see them.\",\n        \"Tell the story of the last bookstore on Earth.\",\n        \"Write about a character who can hear other people's thoughts but wishes they couldn't.\",\n        \"Describe a day in the life of a superhero's pet.\",\n        \"Write a story that takes place entirely in an elevator.\",\n        \"Tell about a world where lying is impossible.\",\n        \"Write about someone who finds a door that wasn't there yesterday.\"\n    ]\n    return {\n        \"id\": str(uuid.uuid4()),\n        \"prompt\": random.choice(prompts),\n        \"time_limit\": 300,  # 5 minutes\n        \"word_limit\": 200\n    }\n\ndef generate_ai_writing(prompt):\n    \"\"\"Generate AI writing for comparison (placeholder - replace with actual AI service)\"\"\"\n    # Placeholder AI responses - in production, integrate with GPT, Gemini, etc.\n    ai_responses = {\n        \"Write a short story about a time traveler who can only move forward one day at a time.\": \n            \"Each morning, Sarah woke knowing she had moved one day closer to her destination. The time machine hummed softly, its blue light indicating another successful jump. She couldn't go back, couldn't skip ahead ‚Äì just one day forward, always forward. Today marked day 1,247 of her journey to find the cure that would save her daughter, still frozen in 2024. The weight of time pressed on her shoulders as she stepped into another tomorrow.\",\n        \n        \"Describe a world where colors have disappeared and one person can still see them.\":\n            \"The world turned grey on a Tuesday. Everyone woke to find their vibrant reality drained of hue, except Maya. She alone saw the crimson roses, the azure sky, the golden sunlight. At first, she thought others were playing a cruel joke. But their confused faces, their desperate reaching for something they'd lost but couldn't name, told her otherwise. Maya became the keeper of color in a monochrome world, painting memories for those who could no longer see beauty.\",\n            \n        \"Tell the story of the last bookstore on Earth.\":\n            \"The sign read 'Miller's Books - Est. 1952' in faded letters. Inside, dust motes danced through streams of sunlight as Elena arranged the final shipment that would never come. Digital readers had won the war, and she was the last holdout. But as she touched each spine, each story, she felt the weight of preserving something sacred. The books whispered their tales, hoping someone would still listen in a world that had forgotten the magic of turning pages.\"\n    }\n    \n    return ai_responses.get(prompt, \"The AI pondered the prompt deeply, crafting a response that balanced creativity with logic, weaving words into a tapestry of meaning that reflected both human emotion and artificial precision.\")\n\ndef get_audio_recognition_data():\n    \"\"\"Get audio clips for human vs AI recognition\"\"\"\n    # In production, these would be actual audio files served from a CDN\n    audio_clips = [\n        {\n            \"id\": 1,\n            \"url\": \"https://www.soundjay.com/misc/sounds/bell-ringing-05.wav\",\n            \"is_ai\": False,\n            \"description\": \"Human-recorded bell sound\",\n            \"duration\": 3\n        },\n        {\n            \"id\": 2,\n            \"url\": \"https://www.soundjay.com/buttons/sounds/button-3.wav\", \n            \"is_ai\": True,\n            \"description\": \"AI-generated button sound\",\n            \"duration\": 2\n        },\n        {\n            \"id\": 3,\n            \"url\": \"https://www.soundjay.com/buttons/sounds/button-09.wav\",\n            \"is_ai\": False,\n            \"description\": \"Human-recorded click\",\n            \"duration\": 1\n        },\n        {\n            \"id\": 4,\n            \"url\": \"https://www.soundjay.com/misc/sounds/bell-ringing-04.wav\",\n            \"is_ai\": True, \n            \"description\": \"AI-synthesized bell\",\n            \"duration\": 4\n        }\n    ]\n    return random.sample(audio_clips, 3)\n\ndef analyze_image_authenticity(image_data):\n    \"\"\"Analyze if an image is authentic or AI-generated\"\"\"\n    # Placeholder for image analysis - in production, integrate with detection models\n    # This would use libraries like torch, tensorflow, or cloud APIs\n    \n    # Simulate different confidence levels for authentic vs AI-generated\n    is_authentic = random.choice([True, False])\n    confidence = random.uniform(0.7, 0.95)\n    \n    if is_authentic:\n        result = \"Authentic Image\"\n        indicators = [\"Natural lighting variations\", \"Camera noise patterns\", \"Organic texture details\"]\n    else:\n        result = \"AI-Generated Image\"\n        indicators = [\"Symmetrical face features\", \"Unnatural lighting\", \"Repetitive patterns\"]\n    \n    return {\n        \"result\": result,\n        \"confidence\": round(confidence, 2),\n        \"indicators\": indicators,\n        \"is_authentic\": is_authentic\n    }\n\n# Routes\n@api_router.get(\"/\")\nasync def root():\n    return {\"message\": \"AI Cognitive Platform API\", \"version\": \"1.0.0\"}\n\n@api_router.post(\"/auth/register\")\nasync def register(user_data: UserCreate):\n    # Check if user exists\n    async with aiosqlite.connect(DATABASE_PATH) as db:\n        async with db.execute('SELECT id FROM users WHERE username = ? OR email = ?', \n                             (user_data.username, user_data.email)) as cursor:\n            if await cursor.fetchone():\n                raise HTTPException(status_code=400, detail=\"Username or email already exists\")\n        \n        # Create user\n        hashed_password = hash_password(user_data.password)\n        user_id = str(uuid.uuid4())\n        created_at = datetime.now(timezone.utc).isoformat()\n        \n        await db.execute('''\n            INSERT INTO users (id, username, email, password, created_at)\n            VALUES (?, ?, ?, ?, ?)\n        ''', (user_id, user_data.username, user_data.email, hashed_password, created_at))\n        await db.commit()\n        \n        token = create_jwt_token(user_id, user_data.username)\n        user = User(id=user_id, username=user_data.username, email=user_data.email, \n                   created_at=datetime.fromisoformat(created_at))\n        \n        return {\"message\": \"User created successfully\", \"token\": token, \"user\": user}\n\n@api_router.post(\"/auth/login\")\nasync def login(login_data: UserLogin):\n    async with aiosqlite.connect(DATABASE_PATH) as db:\n        async with db.execute('SELECT * FROM users WHERE username = ?', (login_data.username,)) as cursor:\n            row = await cursor.fetchone()\n            if not row or not verify_password(login_data.password, row[3]):\n                raise HTTPException(status_code=401, detail=\"Invalid credentials\")\n            \n            token = create_jwt_token(row[0], row[1])\n            user = User(\n                id=row[0], username=row[1], email=row[2],\n                created_at=datetime.fromisoformat(row[4]),\n                total_games_played=row[5], total_score=row[6]\n            )\n            \n            return {\"message\": \"Login successful\", \"token\": token, \"user\": user}\n\n@api_router.get(\"/auth/me\")\nasync def get_current_user_profile(current_user: User = Depends(get_current_user)):\n    return current_user\n\n@api_router.get(\"/games/ai-image/data\")\nasync def get_ai_image_data(current_user: User = Depends(get_current_user)):\n    return {\"images\": get_ai_image_game_data()}\n\n@api_router.get(\"/games/text-ai/data\")\nasync def get_text_ai_data(current_user: User = Depends(get_current_user)):\n    return {\"texts\": get_text_ai_game_data()}\n\n@api_router.get(\"/games/memory/data\")\nasync def get_memory_data(difficulty: int = 1, current_user: User = Depends(get_current_user)):\n    return get_memory_game_data(difficulty)\n\n@api_router.post(\"/games/score\")\nasync def submit_game_score(score_data: GameScoreCreate, current_user: User = Depends(get_current_user)):\n    # Get AI baseline for comparison\n    baseline = AI_BASELINES.get(score_data.game_type, {})\n    ai_baseline_accuracy = baseline.get('accuracy', 80.0)\n    ai_baseline_score = int(score_data.score * (ai_baseline_accuracy / 100) * baseline.get('score_multiplier', 100) / 100)\n    \n    # Create game score record\n    async with aiosqlite.connect(DATABASE_PATH) as db:\n        score_id = str(uuid.uuid4())\n        timestamp = datetime.now(timezone.utc).isoformat()\n        \n        await db.execute('''\n            INSERT INTO game_scores (id, user_id, game_type, score, accuracy, time_taken, \n                                   ai_baseline_score, ai_baseline_accuracy, timestamp)\n            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n        ''', (score_id, current_user.id, score_data.game_type, score_data.score,\n              score_data.accuracy, score_data.time_taken, ai_baseline_score,\n              ai_baseline_accuracy, timestamp))\n        \n        # Update user stats\n        await db.execute('''\n            UPDATE users SET total_games_played = total_games_played + 1,\n                           total_score = total_score + ?\n            WHERE id = ?\n        ''', (score_data.score, current_user.id))\n        \n        await db.commit()\n    \n    return {\n        \"message\": \"Score submitted successfully\",\n        \"your_score\": score_data.score,\n        \"ai_baseline\": ai_baseline_score,\n        \"performance\": \"Better than AI\" if score_data.score > ai_baseline_score else \"AI performed better\"\n    }\n\n@api_router.get(\"/leaderboard\")\nasync def get_leaderboard():\n    async with aiosqlite.connect(DATABASE_PATH) as db:\n        async with db.execute('SELECT * FROM users ORDER BY total_score DESC LIMIT 10') as cursor:\n            rows = await cursor.fetchall()\n            human_leaders = [\n                User(\n                    id=row[0], username=row[1], email=row[2],\n                    created_at=datetime.fromisoformat(row[4]),\n                    total_games_played=row[5], total_score=row[6]\n                ) for row in rows if row[0] != 'guest'\n            ]\n    \n    # Simulated AI baselines for leaderboard\n    ai_baselines = [\n        {\"name\": \"GPT-5\", \"total_score\": 8750, \"games_played\": 100, \"is_ai\": True},\n        {\"name\": \"Claude Sonnet 4\", \"total_score\": 8520, \"games_played\": 100, \"is_ai\": True},\n        {\"name\": \"Gemini 2.5 Pro\", \"total_score\": 8340, \"games_played\": 100, \"is_ai\": True}\n    ]\n    \n    return {\n        \"human_leaders\": human_leaders,\n        \"ai_baselines\": ai_baselines\n    }\n\n@api_router.get(\"/stats/user\")\nasync def get_user_stats(current_user: User = Depends(get_current_user)):\n    async with aiosqlite.connect(DATABASE_PATH) as db:\n        async with db.execute('SELECT * FROM game_scores WHERE user_id = ?', (current_user.id,)) as cursor:\n            rows = await cursor.fetchall()\n            \n            # Calculate stats by game type\n            stats = {}\n            for game_type in ['ai_image', 'text_ai', 'memory_challenge']:\n                type_scores = [row for row in rows if row[2] == game_type]  # game_type is index 2\n                if type_scores:\n                    avg_accuracy = sum(row[4] for row in type_scores) / len(type_scores)  # accuracy is index 4\n                    avg_time = sum(row[5] for row in type_scores) / len(type_scores)  # time_taken is index 5\n                    best_score = max(row[3] for row in type_scores)  # score is index 3\n                    games_played = len(type_scores)\n                else:\n                    avg_accuracy = avg_time = best_score = games_played = 0\n                    \n                stats[game_type] = {\n                    \"games_played\": games_played,\n                    \"avg_accuracy\": round(avg_accuracy, 1),\n                    \"avg_time\": round(avg_time, 1),\n                    \"best_score\": best_score\n                }\n            \n            return {\"user_stats\": stats, \"total_games\": len(rows)}\n\n# New Game API Endpoints\n@api_router.get(\"/games/logical-reasoning/data\")\nasync def get_logical_reasoning_data(difficulty: int = 1, current_user: User = Depends(get_current_user)):\n    puzzle = generate_logical_puzzle(difficulty)\n    ai_solution = solve_logical_puzzle_ai(puzzle)\n    return {\n        \"puzzle\": puzzle,\n        \"ai_baseline\": ai_solution\n    }\n\n@api_router.post(\"/games/logical-reasoning/submit\")\nasync def submit_logical_reasoning_answer(\n    puzzle_id: str, \n    user_answer: str, \n    time_taken: int,\n    current_user: User = Depends(get_current_user)\n):\n    # In a real implementation, you'd retrieve the puzzle by ID and validate\n    # For now, we'll simulate the scoring\n    is_correct = random.choice([True, False])  # Placeholder logic\n    score = 100 if is_correct else 0\n    accuracy = 100.0 if is_correct else 0.0\n    \n    return {\n        \"correct\": is_correct,\n        \"score\": score,\n        \"accuracy\": accuracy,\n        \"explanation\": \"Well reasoned!\" if is_correct else \"Try again! The logic was close.\"\n    }\n\n@api_router.get(\"/games/creative-writing/prompt\")\nasync def get_creative_writing_prompt(current_user: User = Depends(get_current_user)):\n    return get_creative_writing_prompts()\n\n@api_router.post(\"/games/creative-writing/submit\")\nasync def submit_creative_writing(\n    prompt_id: str,\n    user_writing: str,\n    time_taken: int,\n    current_user: User = Depends(get_current_user)\n):\n    # Generate AI writing for comparison\n    # In production, extract the original prompt and generate AI response\n    sample_prompt = \"Write a short story about a time traveler who can only move forward one day at a time.\"\n    ai_writing = generate_ai_writing(sample_prompt)\n    \n    # Simple scoring based on length and creativity (placeholder)\n    word_count = len(user_writing.split())\n    creativity_score = min(word_count * 0.5, 100)\n    \n    return {\n        \"user_writing\": user_writing,\n        \"ai_writing\": ai_writing,\n        \"user_score\": creativity_score,\n        \"ai_score\": 85,  # AI baseline\n        \"feedback\": \"Great creativity!\" if creativity_score > 50 else \"Try to be more descriptive!\",\n        \"word_count\": word_count\n    }\n\n@api_router.get(\"/games/audio-recognition/data\")\nasync def get_audio_recognition_data(current_user: User = Depends(get_current_user)):\n    return {\"audio_clips\": get_audio_recognition_data()}\n\n@api_router.post(\"/games/audio-recognition/submit\")\nasync def submit_audio_recognition_answer(\n    audio_id: int,\n    user_answer: str,  # \"human\" or \"ai\"\n    time_taken: int,\n    current_user: User = Depends(get_current_user)\n):\n    # In production, validate against the actual audio clip data\n    audio_clips = get_audio_recognition_data()\n    correct_answer = \"ai\" if audio_id % 2 == 0 else \"human\"  # Placeholder logic\n    is_correct = user_answer.lower() == correct_answer\n    \n    score = 100 if is_correct else 0\n    accuracy = 100.0 if is_correct else 0.0\n    \n    return {\n        \"correct\": is_correct,\n        \"correct_answer\": correct_answer,\n        \"score\": score,\n        \"accuracy\": accuracy,\n        \"explanation\": \"Correct identification!\" if is_correct else f\"This was {correct_answer}-generated audio.\"\n    }\n\n@api_router.post(\"/content-authentication/analyze-image\")\nasync def analyze_uploaded_image(\n    file: bytes,\n    current_user: User = Depends(get_current_user)\n):\n    # Analyze the uploaded image for authenticity\n    analysis_result = analyze_image_authenticity(file)\n    \n    return {\n        \"analysis\": analysis_result,\n        \"processing_time\": random.uniform(0.5, 2.0),  # Simulate processing time\n        \"model_version\": \"v2.1.0\"\n    }\n\n# Include the router in the main app\napp.include_router(api_router)\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_credentials=True,\n    allow_origins=os.environ.get('CORS_ORIGINS', '*').split(','),\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    await init_database()\n\nif __name__ == \"__main__\":\n    import uvicorn\n    port = int(os.environ.get(\"PORT\", 8000))\n    uvicorn.run(app, host=\"localhost\", port=port)","size_bytes":29386},"backend/server_mongodb.py":{"content":"from fastapi import FastAPI, APIRouter, HTTPException, Depends, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom dotenv import load_dotenv\nfrom starlette.middleware.cors import CORSMiddleware\nfrom motor.motor_asyncio import AsyncIOMotorClient\nimport os\nimport logging\nfrom pathlib import Path\nfrom pydantic import BaseModel, Field, EmailStr\nfrom typing import List, Optional, Dict, Any\nimport uuid\nfrom datetime import datetime, timedelta, timezone\nimport jwt\nimport bcrypt\nimport random\nimport json\n\nROOT_DIR = Path(__file__).parent\nload_dotenv(ROOT_DIR / '.env')\n\n# MongoDB connection\nmongo_url = os.environ['MONGO_URL']\nclient = AsyncIOMotorClient(mongo_url)\ndb = client[os.environ['DB_NAME']]\n\n# JWT Settings\nJWT_SECRET = os.environ.get('JWT_SECRET', 'your-secret-key-change-in-production')\nJWT_ALGORITHM = 'HS256'\nJWT_EXPIRATION_HOURS = 24\n\n# Security\n# Allow missing credentials to enable anonymous access\nsecurity = HTTPBearer(auto_error=False)\n\n# Create the main app\napp = FastAPI(title=\"AI Cognitive Platform API\")\n@app.get(\"/\")\nasync def home():\n    return {\"message\": \"Welcome to AI Cognitive Platform API!\"}\n\n\n# Create a router with the /api prefix\napi_router = APIRouter(prefix=\"/api\")\n\n# Models\nclass User(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))\n    username: str\n    email: EmailStr\n    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))\n    total_games_played: int = Field(default=0)\n    total_score: int = Field(default=0)\n\nclass UserCreate(BaseModel):\n    username: str\n    email: EmailStr\n    password: str\n\nclass UserLogin(BaseModel):\n    username: str\n    password: str\n\nclass GameScore(BaseModel):\n    id: str = Field(default_factory=lambda: str(uuid.uuid4()))\n    user_id: str\n    game_type: str  # 'ai_image', 'text_ai', 'memory_challenge'\n    score: int\n    accuracy: float\n    time_taken: int  # seconds\n    ai_baseline_score: int\n    ai_baseline_accuracy: float\n    timestamp: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))\n\nclass GameScoreCreate(BaseModel):\n    game_type: str\n    score: int\n    accuracy: float\n    time_taken: int\n\nclass AIImageGameData(BaseModel):\n    images: List[Dict[str, Any]]\n    \nclass TextAIGameData(BaseModel):\n    texts: List[Dict[str, Any]]\n\nclass MemoryGameData(BaseModel):\n    sequence: List[int]\n    difficulty: int\n\n# Authentication helpers\ndef hash_password(password: str) -> str:\n    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')\n\ndef verify_password(password: str, hashed: str) -> bool:\n    return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))\n\ndef create_jwt_token(user_id: str, username: str) -> str:\n    payload = {\n        'user_id': user_id,\n        'username': username,\n        'exp': datetime.now(timezone.utc) + timedelta(hours=JWT_EXPIRATION_HOURS)\n    }\n    return jwt.encode(payload, JWT_SECRET, algorithm=JWT_ALGORITHM)\n\nasync def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):\n    # If no credentials are provided, return or create a default Guest user\n    if credentials is None:\n        guest = await db.users.find_one({\"id\": \"guest\"})\n        if not guest:\n            guest_user = User(id=\"guest\", username=\"Guest\", email=\"guest@example.com\")\n            await db.users.insert_one(guest_user.dict())\n            return guest_user\n        return User(**guest)\n\n    try:\n        payload = jwt.decode(credentials.credentials, JWT_SECRET, algorithms=[JWT_ALGORITHM])\n        user_id = payload.get('user_id')\n        if user_id is None:\n            raise HTTPException(status_code=401, detail=\"Invalid token\")\n        \n        user = await db.users.find_one({\"id\": user_id})\n        if user is None:\n            raise HTTPException(status_code=401, detail=\"User not found\")\n        \n        return User(**user)\n    except jwt.ExpiredSignatureError:\n        raise HTTPException(status_code=401, detail=\"Token expired\")\n    except jwt.JWTError:\n        raise HTTPException(status_code=401, detail=\"Invalid token\")\n\n# AI Baseline Data (Simulated for MVP)\nAI_BASELINES = {\n    'ai_image': {\n        'accuracy': 92.5,\n        'average_time': 3.2,\n        'score_multiplier': 100\n    },\n    'text_ai': {\n        'accuracy': 88.7,\n        'average_time': 5.1,\n        'score_multiplier': 100\n    },\n    'memory_challenge': {\n        'accuracy': 78.3,\n        'average_time': 12.5,\n        'score_multiplier': 100\n    }\n}\n\n# Game Data (Simulated for MVP)\ndef get_ai_image_game_data():\n    \"\"\"Generate AI Image vs Real Image game data\"\"\"\n    images = [\n        {\n            \"id\": 1,\n            \"url\": \"https://images.unsplash.com/photo-1673255745677-e36f618550d1?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NDQ2MzR8MHwxfHNlYXJjaHwxfHxBSSUyMGJyYWluJTIwdGVjaG5vbG9neXxlbnwwfHx8fDE3NTY5ODExODV8MA&ixlib=rb-4.1.0&q=85\",\n            \"is_ai\": True,\n            \"description\": \"Futuristic AI Robot\"\n        },\n        {\n            \"id\": 2,\n            \"url\": \"https://images.unsplash.com/photo-1549925245-f20a1bac6454?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NDQ2MzR8MHwxfHNlYXJjaHwyfHxBSSUyMGJyYWluJTIwdGVjaG5vbG9neXxlbnwwfHx8fDE3NTY5ODExODV8MA&ixlib=rb-4.1.0&q=85\",\n            \"is_ai\": False, \n            \"description\": \"Brain Visualization\"\n        },\n        {\n            \"id\": 3,\n            \"url\": \"https://images.pexels.com/photos/8438864/pexels-photo-8438864.jpeg\",\n            \"is_ai\": False,\n            \"description\": \"Robot Playing Chess\"\n        },\n        {\n            \"id\": 4,\n            \"url\": \"https://images.pexels.com/photos/8438954/pexels-photo-8438954.jpeg\", \n            \"is_ai\": False,\n            \"description\": \"AI vs Human Chess Match\"\n        },\n        {\n            \"id\": 5,\n            \"url\": \"https://images.unsplash.com/photo-1677442136019-21780ecad995?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NDQ2MzR8MHwxfHNlYXJjaHw1fHxBSSUyMGJyYWluJTIwdGVjaG5vbG9neXxlbnwwfHx8fDE3NTY5ODExODV8MA&ixlib=rb-4.1.0&q=85\",\n            \"is_ai\": True,\n            \"description\": \"AI Technology\"\n        }\n    ]\n    return random.sample(images, 3)\n\ndef get_text_ai_game_data():\n    \"\"\"Generate Text vs AI game data\"\"\"\n    texts = [\n        {\n            \"id\": 1,\n            \"text\": \"The sun dipped below the horizon, painting the sky in brilliant shades of orange and pink. Sarah watched from her window, lost in the beauty of the moment.\",\n            \"is_ai\": False,\n            \"source\": \"Human Writer\"\n        },\n        {\n            \"id\": 2,\n            \"text\": \"As an AI language model, I can assist you in generating content that meets your specific requirements. However, it's important to note that the effectiveness of this approach may vary depending on various factors.\",\n            \"is_ai\": True,\n            \"source\": \"AI Generated\"\n        },\n        {\n            \"id\": 3, \n            \"text\": \"Innovation thrives at the intersection of creativity and technology. When human imagination meets computational power, extraordinary possibilities emerge from the synthesis.\",\n            \"is_ai\": True,\n            \"source\": \"AI Generated\"\n        },\n        {\n            \"id\": 4,\n            \"text\": \"I remember my grandmother's kitchen always smelled like cinnamon and fresh bread. She'd tell us stories about her childhood while we helped her knead dough for Sunday dinner.\",\n            \"is_ai\": False,\n            \"source\": \"Human Writer\"\n        }\n    ]\n    return random.sample(texts, 3)\n\ndef get_memory_game_data(difficulty: int = 1):\n    \"\"\"Generate Memory Challenge game data\"\"\"\n    sequence_length = 4 + (difficulty * 2)  # Start with 4, increase by 2 per difficulty\n    sequence = [random.randint(1, 9) for _ in range(sequence_length)]\n    return {\"sequence\": sequence, \"difficulty\": difficulty}\n\n# Routes\n@api_router.get(\"/\")\nasync def root():\n    return {\"message\": \"AI Cognitive Platform API\", \"version\": \"1.0.0\"}\n\n@api_router.post(\"/auth/register\")\nasync def register(user_data: UserCreate):\n    # Check if user exists\n    existing_user = await db.users.find_one({\"$or\": [{\"username\": user_data.username}, {\"email\": user_data.email}]})\n    if existing_user:\n        raise HTTPException(status_code=400, detail=\"Username or email already exists\")\n    \n    # Create user\n    hashed_password = hash_password(user_data.password)\n    user = User(username=user_data.username, email=user_data.email)\n    user_dict = user.dict()\n    user_dict['password'] = hashed_password\n    \n    await db.users.insert_one(user_dict)\n    token = create_jwt_token(user.id, user.username)\n    \n    return {\"message\": \"User created successfully\", \"token\": token, \"user\": user}\n\n@api_router.post(\"/auth/login\")\nasync def login(login_data: UserLogin):\n    user = await db.users.find_one({\"username\": login_data.username})\n    if not user or not verify_password(login_data.password, user['password']):\n        raise HTTPException(status_code=401, detail=\"Invalid credentials\")\n    \n    token = create_jwt_token(user['id'], user['username'])\n    user_obj = User(**user)\n    \n    return {\"message\": \"Login successful\", \"token\": token, \"user\": user_obj}\n\n@api_router.get(\"/auth/me\")\nasync def get_current_user_profile(current_user: User = Depends(get_current_user)):\n    return current_user\n\n@api_router.get(\"/games/ai-image/data\")\nasync def get_ai_image_data(current_user: User = Depends(get_current_user)):\n    return {\"images\": get_ai_image_game_data()}\n\n@api_router.get(\"/games/text-ai/data\")\nasync def get_text_ai_data(current_user: User = Depends(get_current_user)):\n    return {\"texts\": get_text_ai_game_data()}\n\n@api_router.get(\"/games/memory/data\")\nasync def get_memory_data(difficulty: int = 1, current_user: User = Depends(get_current_user)):\n    return get_memory_game_data(difficulty)\n\n@api_router.post(\"/games/score\")\nasync def submit_game_score(score_data: GameScoreCreate, current_user: User = Depends(get_current_user)):\n    # Get AI baseline for comparison\n    baseline = AI_BASELINES.get(score_data.game_type, {})\n    ai_baseline_accuracy = baseline.get('accuracy', 80.0)\n    ai_baseline_score = int(score_data.score * (ai_baseline_accuracy / 100) * baseline.get('score_multiplier', 100) / 100)\n    \n    # Create game score record\n    game_score = GameScore(\n        user_id=current_user.id,\n        game_type=score_data.game_type,\n        score=score_data.score,\n        accuracy=score_data.accuracy,\n        time_taken=score_data.time_taken,\n        ai_baseline_score=ai_baseline_score,\n        ai_baseline_accuracy=ai_baseline_accuracy\n    )\n    \n    await db.game_scores.insert_one(game_score.dict())\n    \n    # Update user stats\n    await db.users.update_one(\n        {\"id\": current_user.id},\n        {\"$inc\": {\"total_games_played\": 1, \"total_score\": score_data.score}}\n    )\n    \n    return {\n        \"message\": \"Score submitted successfully\",\n        \"your_score\": score_data.score,\n        \"ai_baseline\": ai_baseline_score,\n        \"performance\": \"Better than AI\" if score_data.score > ai_baseline_score else \"AI performed better\"\n    }\n\n@api_router.get(\"/leaderboard\")\nasync def get_leaderboard():\n    # Get top human players\n    human_leaders = await db.users.find().sort(\"total_score\", -1).limit(10).to_list(10)\n    \n    # Simulated AI baselines for leaderboard\n    ai_baselines = [\n        {\"name\": \"GPT-5\", \"total_score\": 8750, \"games_played\": 100, \"is_ai\": True},\n        {\"name\": \"Claude Sonnet 4\", \"total_score\": 8520, \"games_played\": 100, \"is_ai\": True},\n        {\"name\": \"Gemini 2.5 Pro\", \"total_score\": 8340, \"games_played\": 100, \"is_ai\": True}\n    ]\n    \n    return {\n        \"human_leaders\": [User(**user) for user in human_leaders],\n        \"ai_baselines\": ai_baselines\n    }\n\n@api_router.get(\"/stats/user\")\nasync def get_user_stats(current_user: User = Depends(get_current_user)):\n    # Get user's game history\n    game_scores = await db.game_scores.find({\"user_id\": current_user.id}).to_list(100)\n    \n    # Calculate stats by game type\n    stats = {}\n    for game_type in ['ai_image', 'text_ai', 'memory_challenge']:\n        type_scores = [score for score in game_scores if score['game_type'] == game_type]\n        if type_scores:\n            avg_accuracy = sum(score['accuracy'] for score in type_scores) / len(type_scores)\n            avg_time = sum(score['time_taken'] for score in type_scores) / len(type_scores)\n            best_score = max(score['score'] for score in type_scores)\n            games_played = len(type_scores)\n        else:\n            avg_accuracy = avg_time = best_score = games_played = 0\n            \n        stats[game_type] = {\n            \"games_played\": games_played,\n            \"avg_accuracy\": round(avg_accuracy, 1),\n            \"avg_time\": round(avg_time, 1),\n            \"best_score\": best_score\n        }\n    \n    return {\"user_stats\": stats, \"total_games\": len(game_scores)}\n\n# Include the router in the main app\napp.include_router(api_router)\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_credentials=True,\n    allow_origins=os.environ.get('CORS_ORIGINS', '*').split(','),\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\n@app.on_event(\"shutdown\")\nasync def shutdown_db_client():\n    client.close()\nif __name__ == \"__main__\":\n    import uvicorn\n    import os\n\n    port = int(os.environ.get(\"PORT\", 8000))  # Use Render PORT or 8000 default\n    uvicorn.run(app, host=\"0.0.0.0\", port=port)\n\n","size_bytes":13520},"frontend/README.md":{"content":"# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in your browser.\n\nThe page will reload when you make changes.\\\nYou may also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can't go back!**\n\nIf you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.\n\nYou don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `npm run build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)\n","size_bytes":3359},"frontend/craco.config.js":{"content":"// Load configuration from environment or config file\nconst path = require('path');\n\n// Environment variable overrides\nconst config = {\n  disableHotReload: process.env.DISABLE_HOT_RELOAD === 'true',\n};\n\nmodule.exports = {\n  devServer: {\n    port: 5000,\n    host: '0.0.0.0',\n    allowedHosts: 'all',\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': '*',\n      'Access-Control-Allow-Headers': '*',\n    },\n  },\n  webpack: {\n    alias: {\n      '@': path.resolve(__dirname, 'src'),\n    },\n    configure: (webpackConfig) => {\n      \n      // Disable hot reload completely if environment variable is set\n      if (config.disableHotReload) {\n        // Remove hot reload related plugins\n        webpackConfig.plugins = webpackConfig.plugins.filter(plugin => {\n          return !(plugin.constructor.name === 'HotModuleReplacementPlugin');\n        });\n        \n        // Disable watch mode\n        webpackConfig.watch = false;\n        webpackConfig.watchOptions = {\n          ignored: /.*/, // Ignore all files\n        };\n      } else {\n        // Add ignored patterns to reduce watched directories\n        webpackConfig.watchOptions = {\n          ...webpackConfig.watchOptions,\n          ignored: [\n            '**/node_modules/**',\n            '**/.git/**',\n            '**/build/**',\n            '**/dist/**',\n            '**/coverage/**',\n            '**/public/**',\n          ],\n        };\n      }\n      \n      return webpackConfig;\n    },\n  },\n};","size_bytes":1489},"frontend/postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":82},"frontend/tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n    darkMode: [\"class\"],\n    content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n    \"./public/index.html\"\n  ],\n  theme: {\n  \textend: {\n  \t\tborderRadius: {\n  \t\t\tlg: 'var(--radius)',\n  \t\t\tmd: 'calc(var(--radius) - 2px)',\n  \t\t\tsm: 'calc(var(--radius) - 4px)'\n  \t\t},\n  \t\tcolors: {\n  \t\t\tbackground: 'hsl(var(--background))',\n  \t\t\tforeground: 'hsl(var(--foreground))',\n  \t\t\tcard: {\n  \t\t\t\tDEFAULT: 'hsl(var(--card))',\n  \t\t\t\tforeground: 'hsl(var(--card-foreground))'\n  \t\t\t},\n  \t\t\tpopover: {\n  \t\t\t\tDEFAULT: 'hsl(var(--popover))',\n  \t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n  \t\t\t},\n  \t\t\tprimary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--primary))',\n  \t\t\t\tforeground: 'hsl(var(--primary-foreground))'\n  \t\t\t},\n  \t\t\tsecondary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n  \t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n  \t\t\t},\n  \t\t\tmuted: {\n  \t\t\t\tDEFAULT: 'hsl(var(--muted))',\n  \t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n  \t\t\t},\n  \t\t\taccent: {\n  \t\t\t\tDEFAULT: 'hsl(var(--accent))',\n  \t\t\t\tforeground: 'hsl(var(--accent-foreground))'\n  \t\t\t},\n  \t\t\tdestructive: {\n  \t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n  \t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n  \t\t\t},\n  \t\t\tborder: 'hsl(var(--border))',\n  \t\t\tinput: 'hsl(var(--input))',\n  \t\t\tring: 'hsl(var(--ring))',\n  \t\t\tchart: {\n  \t\t\t\t'1': 'hsl(var(--chart-1))',\n  \t\t\t\t'2': 'hsl(var(--chart-2))',\n  \t\t\t\t'3': 'hsl(var(--chart-3))',\n  \t\t\t\t'4': 'hsl(var(--chart-4))',\n  \t\t\t\t'5': 'hsl(var(--chart-5))'\n  \t\t\t}\n  \t\t},\n  \t\tkeyframes: {\n  \t\t\t'accordion-down': {\n  \t\t\t\tfrom: {\n  \t\t\t\t\theight: '0'\n  \t\t\t\t},\n  \t\t\t\tto: {\n  \t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n  \t\t\t\t}\n  \t\t\t},\n  \t\t\t'accordion-up': {\n  \t\t\t\tfrom: {\n  \t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n  \t\t\t\t},\n  \t\t\t\tto: {\n  \t\t\t\t\theight: '0'\n  \t\t\t\t}\n  \t\t\t}\n  \t\t},\n  \t\tanimation: {\n  \t\t\t'accordion-down': 'accordion-down 0.2s ease-out',\n  \t\t\t'accordion-up': 'accordion-up 0.2s ease-out'\n  \t\t}\n  \t}\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n};","size_bytes":2013},"tests/__init__.py":{"content":"","size_bytes":0},"frontend/src/App.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&family=JetBrains+Mono:wght@400;500;600&display=swap');\n\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: 'Inter', sans-serif;\n  background: #020617;\n  color: #f1f5f9;\n  line-height: 1.6;\n  overflow-x: hidden;\n}\n\n.App {\n  min-height: 100vh;\n}\n\n/* Landing Page Styles */\n.landing-hero {\n  background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);\n  min-height: 100vh;\n  position: relative;\n  overflow: hidden;\n}\n\n.landing-hero::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: \n    radial-gradient(circle at 20% 50%, rgba(14, 165, 233, 0.15) 0%, transparent 50%),\n    radial-gradient(circle at 80% 20%, rgba(139, 92, 246, 0.15) 0%, transparent 50%),\n    radial-gradient(circle at 40% 80%, rgba(34, 197, 94, 0.1) 0%, transparent 50%);\n  pointer-events: none;\n}\n\n.hero-title {\n  background: linear-gradient(135deg, #0ea5e9 0%, #8b5cf6 50%, #22c55e 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  font-size: 4.5rem;\n  font-weight: 800;\n  line-height: 1.1;\n  text-align: center;\n  margin-bottom: 1.5rem;\n}\n\n.hero-subtitle {\n  font-size: 1.5rem;\n  color: #94a3b8;\n  text-align: center;\n  margin-bottom: 3rem;\n  max-width: 600px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.feature-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 2rem;\n  margin: 4rem 0;\n}\n\n.feature-card {\n  background: rgba(30, 41, 59, 0.5);\n  backdrop-filter: blur(12px);\n  border: 1px solid rgba(51, 65, 85, 0.5);\n  border-radius: 16px;\n  padding: 2rem;\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n}\n\n.feature-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 2px;\n  background: linear-gradient(90deg, #0ea5e9, #8b5cf6, #22c55e);\n  transform: scaleX(0);\n  transition: transform 0.3s ease;\n}\n\n.feature-card:hover::before {\n  transform: scaleX(1);\n}\n\n.feature-card:hover {\n  transform: translateY(-4px);\n  border-color: rgba(14, 165, 233, 0.3);\n  box-shadow: 0 20px 40px rgba(14, 165, 233, 0.1);\n}\n\n.feature-icon {\n  width: 48px;\n  height: 48px;\n  margin-bottom: 1rem;\n  color: #0ea5e9;\n}\n\n.feature-title {\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: #f1f5f9;\n  margin-bottom: 0.5rem;\n}\n\n.feature-description {\n  color: #94a3b8;\n  line-height: 1.6;\n}\n\n/* Game Card Styles */\n.game-card {\n  background: rgba(30, 41, 59, 0.6);\n  backdrop-filter: blur(16px);\n  border: 1px solid rgba(51, 65, 85, 0.4);\n  border-radius: 20px;\n  padding: 2rem;\n  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n  position: relative;\n  overflow: hidden;\n  cursor: pointer;\n}\n\n.game-card::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(135deg, \n    rgba(14, 165, 233, 0.1) 0%, \n    rgba(139, 92, 246, 0.1) 50%, \n    rgba(34, 197, 94, 0.1) 100%);\n  opacity: 0;\n  transition: opacity 0.4s ease;\n}\n\n.game-card:hover::before {\n  opacity: 1;\n}\n\n.game-card:hover {\n  transform: translateY(-8px) scale(1.02);\n  border-color: rgba(14, 165, 233, 0.4);\n  box-shadow: 0 25px 50px rgba(14, 165, 233, 0.15);\n}\n\n.game-icon {\n  width: 64px;\n  height: 64px;\n  margin-bottom: 1.5rem;\n  color: #0ea5e9;\n  z-index: 1;\n  position: relative;\n}\n\n.game-title {\n  font-size: 1.5rem;\n  font-weight: 700;\n  color: #f1f5f9;\n  margin-bottom: 0.75rem;\n  z-index: 1;\n  position: relative;\n}\n\n.game-description {\n  color: #cbd5e1;\n  margin-bottom: 1.5rem;\n  z-index: 1;\n  position: relative;\n}\n\n.game-stats {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  z-index: 1;\n  position: relative;\n}\n\n.game-difficulty {\n  padding: 0.25rem 0.75rem;\n  background: rgba(14, 165, 233, 0.2);\n  border: 1px solid rgba(14, 165, 233, 0.3);\n  border-radius: 999px;\n  font-size: 0.875rem;\n  color: #0ea5e9;\n  font-weight: 500;\n}\n\n.game-play-btn {\n  background: linear-gradient(135deg, #0ea5e9 0%, #8b5cf6 100%);\n  color: white;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: 12px;\n  font-weight: 600;\n  font-size: 0.9rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  text-decoration: none;\n  display: inline-flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.game-play-btn:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 16px rgba(14, 165, 233, 0.3);\n}\n\n/* Navigation Styles */\n.navbar {\n  background: rgba(15, 23, 42, 0.9);\n  backdrop-filter: blur(12px);\n  border-bottom: 1px solid rgba(51, 65, 85, 0.3);\n  padding: 1rem 0;\n  position: sticky;\n  top: 0;\n  z-index: 50;\n}\n\n.nav-content {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 2rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.nav-brand {\n  font-size: 1.5rem;\n  font-weight: 700;\n  background: linear-gradient(135deg, #0ea5e9, #8b5cf6);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  text-decoration: none;\n}\n\n.nav-links {\n  display: flex;\n  gap: 2rem;\n  align-items: center;\n}\n\n.nav-link {\n  color: #cbd5e1;\n  text-decoration: none;\n  font-weight: 500;\n  transition: color 0.3s ease;\n  padding: 0.5rem 1rem;\n  border-radius: 8px;\n}\n\n.nav-link:hover {\n  color: #0ea5e9;\n  background: rgba(14, 165, 233, 0.1);\n}\n\n.nav-link.active {\n  color: #0ea5e9;\n  background: rgba(14, 165, 233, 0.1);\n}\n\n/* Form Styles */\n.auth-container {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem;\n}\n\n.auth-card {\n  background: rgba(30, 41, 59, 0.8);\n  backdrop-filter: blur(16px);\n  border: 1px solid rgba(51, 65, 85, 0.3);\n  border-radius: 20px;\n  padding: 3rem;\n  width: 100%;\n  max-width: 400px;\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n}\n\n.auth-title {\n  font-size: 2rem;\n  font-weight: 700;\n  text-align: center;\n  margin-bottom: 2rem;\n  background: linear-gradient(135deg, #0ea5e9, #8b5cf6);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.form-group {\n  margin-bottom: 1.5rem;\n}\n\n.form-label {\n  display: block;\n  margin-bottom: 0.5rem;\n  font-weight: 500;\n  color: #e2e8f0;\n}\n\n.form-input {\n  width: 100%;\n  padding: 0.875rem 1rem;\n  background: rgba(15, 23, 42, 0.8);\n  border: 1px solid rgba(51, 65, 85, 0.5);\n  border-radius: 12px;\n  color: #f1f5f9;\n  font-size: 1rem;\n  transition: all 0.3s ease;\n}\n\n.form-input:focus {\n  outline: none;\n  border-color: #0ea5e9;\n  box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1);\n}\n\n.form-input::placeholder {\n  color: #64748b;\n}\n\n.btn-primary {\n  width: 100%;\n  background: linear-gradient(135deg, #0ea5e9 0%, #8b5cf6 100%);\n  color: white;\n  border: none;\n  padding: 1rem;\n  border-radius: 12px;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  margin-bottom: 1rem;\n}\n\n.btn-primary:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 8px 16px rgba(14, 165, 233, 0.3);\n}\n\n.btn-primary:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n  transform: none;\n}\n\n.auth-link {\n  text-align: center;\n  color: #94a3b8;\n}\n\n.auth-link a {\n  color: #0ea5e9;\n  text-decoration: none;\n  font-weight: 500;\n}\n\n.auth-link a:hover {\n  text-decoration: underline;\n}\n\n/* Game Styles */\n.game-container {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);\n  padding: 2rem;\n}\n\n.game-content {\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n.game-header {\n  text-align: center;\n  margin-bottom: 3rem;\n}\n\n.game-title-main {\n  font-size: 2.5rem;\n  font-weight: 700;\n  background: linear-gradient(135deg, #0ea5e9, #8b5cf6);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  margin-bottom: 1rem;\n}\n\n.game-subtitle {\n  color: #94a3b8;\n  font-size: 1.1rem;\n}\n\n.game-area {\n  background: rgba(30, 41, 59, 0.6);\n  backdrop-filter: blur(16px);\n  border: 1px solid rgba(51, 65, 85, 0.4);\n  border-radius: 20px;\n  padding: 2rem;\n  margin-bottom: 2rem;\n}\n\n.game-image {\n  width: 100%;\n  max-width: 400px;\n  height: 300px;\n  object-fit: cover;\n  border-radius: 12px;\n  margin: 0 auto 2rem;\n  display: block;\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);\n}\n\n.game-options {\n  display: flex;\n  gap: 1rem;\n  justify-content: center;\n  flex-wrap: wrap;\n}\n\n.game-option-btn {\n  background: rgba(15, 23, 42, 0.8);\n  border: 1px solid rgba(51, 65, 85, 0.5);\n  color: #f1f5f9;\n  padding: 1rem 2rem;\n  border-radius: 12px;\n  font-size: 1rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  min-width: 120px;\n}\n\n.game-option-btn:hover {\n  border-color: #0ea5e9;\n  background: rgba(14, 165, 233, 0.1);\n  transform: translateY(-2px);\n}\n\n.game-option-btn.correct {\n  background: rgba(34, 197, 94, 0.2);\n  border-color: #22c55e;\n  color: #22c55e;\n}\n\n.game-option-btn.incorrect {\n  background: rgba(239, 68, 68, 0.2);\n  border-color: #ef4444;\n  color: #ef4444;\n}\n\n.game-stats {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: rgba(15, 23, 42, 0.8);\n  padding: 1rem 2rem;\n  border-radius: 12px;\n  margin-bottom: 2rem;\n}\n\n.stat-item {\n  text-align: center;\n}\n\n.stat-label {\n  color: #94a3b8;\n  font-size: 0.875rem;\n  margin-bottom: 0.25rem;\n}\n\n.stat-value {\n  font-size: 1.25rem;\n  font-weight: 600;\n  color: #0ea5e9;\n}\n\n.game-progress {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 8px;\n  background: rgba(51, 65, 85, 0.5);\n  border-radius: 4px;\n  overflow: hidden;\n  margin-bottom: 1rem;\n}\n\n.progress-fill {\n  height: 100%;\n  background: linear-gradient(90deg, #0ea5e9, #8b5cf6);\n  transition: width 0.3s ease;\n}\n\n/* Memory Game Specific */\n.memory-sequence {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 1rem;\n  max-width: 300px;\n  margin: 2rem auto;\n}\n\n.memory-tile {\n  aspect-ratio: 1;\n  background: rgba(15, 23, 42, 0.8);\n  border: 2px solid rgba(51, 65, 85, 0.5);\n  border-radius: 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  font-weight: 700;\n  color: #94a3b8;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.memory-tile.active {\n  background: linear-gradient(135deg, #0ea5e9, #8b5cf6);\n  color: white;\n  transform: scale(1.05);\n}\n\n.memory-tile.user-input {\n  border-color: #22c55e;\n  background: rgba(34, 197, 94, 0.2);\n}\n\n.memory-tile.incorrect {\n  border-color: #ef4444;\n  background: rgba(239, 68, 68, 0.2);\n  animation: shake 0.5s ease-in-out;\n}\n\n@keyframes shake {\n  0%, 100% { transform: translateX(0); }\n  25% { transform: translateX(-5px); }\n  75% { transform: translateX(5px); }\n}\n\n/* Results Screen */\n.results-screen {\n  text-align: center;\n  padding: 3rem;\n  background: rgba(30, 41, 59, 0.6);\n  backdrop-filter: blur(16px);\n  border: 1px solid rgba(51, 65, 85, 0.4);\n  border-radius: 20px;\n  margin: 2rem auto;\n  max-width: 600px;\n}\n\n.results-title {\n  font-size: 2rem;\n  font-weight: 700;\n  margin-bottom: 2rem;\n  background: linear-gradient(135deg, #0ea5e9, #8b5cf6);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n.results-comparison {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 2rem;\n  margin: 2rem 0;\n}\n\n.comparison-item {\n  background: rgba(15, 23, 42, 0.8);\n  padding: 2rem;\n  border-radius: 12px;\n  border: 1px solid rgba(51, 65, 85, 0.5);\n}\n\n.comparison-label {\n  color: #94a3b8;\n  font-size: 0.875rem;\n  margin-bottom: 0.5rem;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n}\n\n.comparison-score {\n  font-size: 2rem;\n  font-weight: 700;\n  color: #0ea5e9;\n}\n\n.comparison-item.ai {\n  .comparison-score {\n    color: #8b5cf6;\n  }\n}\n\n/* Leaderboard Styles */\n.leaderboard-container {\n  max-width: 1000px;\n  margin: 0 auto;\n  padding: 2rem;\n}\n\n.leaderboard-header {\n  text-align: center;\n  margin-bottom: 3rem;\n}\n\n.leaderboard-title {\n  font-size: 2.5rem;\n  font-weight: 700;\n  background: linear-gradient(135deg, #0ea5e9, #8b5cf6);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n  margin-bottom: 1rem;\n}\n\n.leaderboard-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 2rem;\n}\n\n.leaderboard-section {\n  background: rgba(30, 41, 59, 0.6);\n  backdrop-filter: blur(16px);\n  border: 1px solid rgba(51, 65, 85, 0.4);\n  border-radius: 20px;\n  padding: 2rem;\n}\n\n.section-title {\n  font-size: 1.5rem;\n  font-weight: 600;\n  margin-bottom: 1.5rem;\n  text-align: center;\n}\n\n.section-title.human {\n  color: #22c55e;\n}\n\n.section-title.ai {\n  color: #8b5cf6;\n}\n\n.leaderboard-list {\n  list-style: none;\n}\n\n.leaderboard-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n  background: rgba(15, 23, 42, 0.6);\n  border-radius: 12px;\n  margin-bottom: 0.5rem;\n  border: 1px solid rgba(51, 65, 85, 0.3);\n}\n\n.leaderboard-item.top-3 {\n  border-color: #f59e0b;\n  background: rgba(245, 158, 11, 0.1);\n}\n\n.leaderboard-rank {\n  font-weight: 700;\n  color: #f59e0b;\n  margin-right: 1rem;\n}\n\n.leaderboard-name {\n  flex: 1;\n  font-weight: 500;\n}\n\n.leaderboard-score {\n  font-weight: 600;\n  color: #0ea5e9;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .hero-title {\n    font-size: 3rem;\n  }\n  \n  .hero-subtitle {\n    font-size: 1.25rem;\n  }\n  \n  .feature-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .game-options {\n    flex-direction: column;\n  }\n  \n  .game-option-btn {\n    width: 100%;\n  }\n  \n  .game-stats {\n    flex-direction: column;\n    gap: 1rem;\n  }\n  \n  .results-comparison {\n    grid-template-columns: 1fr;\n  }\n  \n  .leaderboard-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .nav-content {\n    padding: 0 1rem;\n  }\n  \n  .nav-links {\n    gap: 1rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .hero-title {\n    font-size: 2.5rem;\n  }\n  \n  .auth-card {\n    padding: 2rem;\n  }\n  \n  .game-container {\n    padding: 1rem;\n  }\n  \n  .game-area {\n    padding: 1.5rem;\n  }\n}","size_bytes":13973},"frontend/src/App.js":{"content":"import React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport axios from 'axios';\nimport './App.css';\n\n// Components\nimport LandingPage from './components/LandingPage';\nimport Dashboard from './components/Dashboard';\nimport GameAIImage from './components/games/GameAIImage';\nimport GameTextAI from './components/games/GameTextAI';\nimport GameMemory from './components/games/GameMemory';\nimport GameLogicalReasoning from './components/games/GameLogicalReasoning';\nimport GameCreativeWriting from './components/games/GameCreativeWriting';\nimport GameAudioRecognition from './components/games/GameAudioRecognition';\nimport ContentAuthentication from './components/ContentAuthentication';\nimport Leaderboard from './components/Leaderboard';\nimport UserStats from './components/UserStats';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API = `${BACKEND_URL}/api`;\n\n// Auth Context (kept for consumer components; defaults to Guest user)\nconst AuthContext = React.createContext();\n\nfunction App() {\n  const [user] = useState({ id: 'guest', username: 'Guest', total_games_played: 0, total_score: 0 });\n\n  return (\n    <AuthContext.Provider value={{ user }}>\n      <div className=\"App\">\n        <BrowserRouter>\n          <Routes>\n            <Route path=\"/\" element={<LandingPage />} />\n            <Route path=\"/dashboard\" element={<Dashboard />} />\n            <Route path=\"/game/ai-image\" element={<GameAIImage />} />\n            <Route path=\"/game/text-ai\" element={<GameTextAI />} />\n            <Route path=\"/game/memory\" element={<GameMemory />} />\n            <Route path=\"/game/logical-reasoning\" element={<GameLogicalReasoning />} />\n            <Route path=\"/game/creative-writing\" element={<GameCreativeWriting />} />\n            <Route path=\"/game/audio-recognition\" element={<GameAudioRecognition />} />\n            <Route path=\"/content-authentication\" element={<ContentAuthentication />} />\n            <Route path=\"/leaderboard\" element={<Leaderboard />} />\n            <Route path=\"/stats\" element={<UserStats />} />\n          </Routes>\n        </BrowserRouter>\n      </div>\n    </AuthContext.Provider>\n  );\n}\n\nexport { AuthContext, API };\nexport default App;","size_bytes":2246},"frontend/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\",\n        \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\",\n        \"Helvetica Neue\", sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n        monospace;\n}\n\n\n\n@layer base {\n  :root {\n        --background: 0 0% 100%;\n        --foreground: 0 0% 3.9%;\n        --card: 0 0% 100%;\n        --card-foreground: 0 0% 3.9%;\n        --popover: 0 0% 100%;\n        --popover-foreground: 0 0% 3.9%;\n        --primary: 0 0% 9%;\n        --primary-foreground: 0 0% 98%;\n        --secondary: 0 0% 96.1%;\n        --secondary-foreground: 0 0% 9%;\n        --muted: 0 0% 96.1%;\n        --muted-foreground: 0 0% 45.1%;\n        --accent: 0 0% 96.1%;\n        --accent-foreground: 0 0% 9%;\n        --destructive: 0 84.2% 60.2%;\n        --destructive-foreground: 0 0% 98%;\n        --border: 0 0% 89.8%;\n        --input: 0 0% 89.8%;\n        --ring: 0 0% 3.9%;\n        --chart-1: 12 76% 61%;\n        --chart-2: 173 58% 39%;\n        --chart-3: 197 37% 24%;\n        --chart-4: 43 74% 66%;\n        --chart-5: 27 87% 67%;\n        --radius: 0.5rem;\n    }\n  .dark {\n        --background: 0 0% 3.9%;\n        --foreground: 0 0% 98%;\n        --card: 0 0% 3.9%;\n        --card-foreground: 0 0% 98%;\n        --popover: 0 0% 3.9%;\n        --popover-foreground: 0 0% 98%;\n        --primary: 0 0% 98%;\n        --primary-foreground: 0 0% 9%;\n        --secondary: 0 0% 14.9%;\n        --secondary-foreground: 0 0% 98%;\n        --muted: 0 0% 14.9%;\n        --muted-foreground: 0 0% 63.9%;\n        --accent: 0 0% 14.9%;\n        --accent-foreground: 0 0% 98%;\n        --destructive: 0 62.8% 30.6%;\n        --destructive-foreground: 0 0% 98%;\n        --border: 0 0% 14.9%;\n        --input: 0 0% 14.9%;\n        --ring: 0 0% 83.1%;\n        --chart-1: 220 70% 50%;\n        --chart-2: 160 60% 45%;\n        --chart-3: 30 80% 55%;\n        --chart-4: 280 65% 60%;\n        --chart-5: 340 75% 55%;\n    }\n}\n\n\n\n@layer base {\n  * {\n    @apply border-border;\n    }\n  body {\n    @apply bg-background text-foreground;\n    }\n}\n","size_bytes":2253},"frontend/src/index.js":{"content":"import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n);\n","size_bytes":255},"frontend/src/components/ContentAuthentication.js":{"content":"import React, { useState, useContext } from 'react';\nimport { AuthContext, API } from '../App';\nimport axios from 'axios';\n\nconst ContentAuthentication = () => {\n  const { user } = useContext(AuthContext);\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [uploadState, setUploadState] = useState('idle'); // idle, uploading, analyzing, completed\n  const [analysisResult, setAnalysisResult] = useState(null);\n  const [dragActive, setDragActive] = useState(false);\n  const [previewUrl, setPreviewUrl] = useState(null);\n\n  const handleFileSelect = (file) => {\n    if (file && file.type.startsWith('image/')) {\n      setSelectedFile(file);\n      const url = URL.createObjectURL(file);\n      setPreviewUrl(url);\n      setAnalysisResult(null);\n    } else {\n      alert('Please select a valid image file (JPG, PNG, GIF, etc.)');\n    }\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    const files = e.dataTransfer.files;\n    if (files && files[0]) {\n      handleFileSelect(files[0]);\n    }\n  };\n\n  const handleDrag = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === 'dragenter' || e.type === 'dragover') {\n      setDragActive(true);\n    } else if (e.type === 'dragleave') {\n      setDragActive(false);\n    }\n  };\n\n  const handleAnalyze = async () => {\n    if (!selectedFile) return;\n\n    try {\n      setUploadState('uploading');\n      \n      // Convert file to bytes for API\n      const fileBuffer = await selectedFile.arrayBuffer();\n      const fileBytes = new Uint8Array(fileBuffer);\n\n      setUploadState('analyzing');\n      \n      const response = await axios.post(`${API}/content-authentication/analyze-image`, \n        fileBytes,\n        {\n          headers: {\n            'Content-Type': 'application/octet-stream'\n          }\n        }\n      );\n\n      setAnalysisResult(response.data);\n      setUploadState('completed');\n    } catch (error) {\n      console.error('Error analyzing image:', error);\n      setUploadState('idle');\n      alert('Error analyzing image. Please try again.');\n    }\n  };\n\n  const resetAnalysis = () => {\n    setSelectedFile(null);\n    setPreviewUrl(null);\n    setAnalysisResult(null);\n    setUploadState('idle');\n  };\n\n  const getResultColor = () => {\n    if (!analysisResult) return 'text-gray-600';\n    return analysisResult.analysis.is_authentic ? 'text-green-600' : 'text-red-600';\n  };\n\n  const getResultIcon = () => {\n    if (!analysisResult) return '‚ùì';\n    return analysisResult.analysis.is_authentic ? '‚úÖ' : '‚ö†Ô∏è';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-800 mb-2\">Content Authentication</h1>\n          <p className=\"text-gray-600\">Upload an image to detect if it's authentic or AI-generated</p>\n        </div>\n\n        {/* Upload Interface */}\n        <div className=\"bg-white rounded-xl shadow-lg p-8 mb-6\">\n          {!selectedFile ? (\n            /* File Upload Area */\n            <div\n              className={`border-2 border-dashed rounded-lg p-12 text-center transition-colors ${\n                dragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-gray-400'\n              }`}\n              onDrop={handleDrop}\n              onDragOver={handleDrag}\n              onDragEnter={handleDrag}\n              onDragLeave={handleDrag}\n            >\n              <div className=\"mb-4\">\n                <svg className=\"mx-auto h-12 w-12 text-gray-400\" stroke=\"currentColor\" fill=\"none\" viewBox=\"0 0 48 48\">\n                  <path d=\"M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n                </svg>\n              </div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Upload an image for analysis</h3>\n              <p className=\"text-gray-600 mb-4\">Drag and drop your image here, or click to browse</p>\n              <input\n                type=\"file\"\n                id=\"file-upload\"\n                className=\"hidden\"\n                accept=\"image/*\"\n                onChange={(e) => e.target.files[0] && handleFileSelect(e.target.files[0])}\n              />\n              <label\n                htmlFor=\"file-upload\"\n                className=\"inline-block px-6 py-3 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 cursor-pointer transition-colors\"\n              >\n                Choose Image\n              </label>\n              <p className=\"text-sm text-gray-500 mt-4\">Supports JPG, PNG, GIF, WebP (Max 10MB)</p>\n            </div>\n          ) : (\n            /* Image Preview and Analysis */\n            <div>\n              <div className=\"grid md:grid-cols-2 gap-8\">\n                {/* Image Preview */}\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-4\">Uploaded Image</h3>\n                  <div className=\"border rounded-lg overflow-hidden\">\n                    <img\n                      src={previewUrl}\n                      alt=\"Uploaded content\"\n                      className=\"w-full h-64 object-cover\"\n                    />\n                  </div>\n                  <div className=\"mt-4 space-y-2\">\n                    <p className=\"text-sm text-gray-600\">\n                      <span className=\"font-medium\">File:</span> {selectedFile.name}\n                    </p>\n                    <p className=\"text-sm text-gray-600\">\n                      <span className=\"font-medium\">Size:</span> {(selectedFile.size / 1024 / 1024).toFixed(2)} MB\n                    </p>\n                    <p className=\"text-sm text-gray-600\">\n                      <span className=\"font-medium\">Type:</span> {selectedFile.type}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Analysis Panel */}\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-4\">Analysis</h3>\n                  \n                  {uploadState === 'idle' && (\n                    <div className=\"text-center p-8\">\n                      <button\n                        onClick={handleAnalyze}\n                        className=\"px-8 py-3 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors\"\n                      >\n                        Analyze Image\n                      </button>\n                    </div>\n                  )}\n\n                  {uploadState === 'uploading' && (\n                    <div className=\"text-center p-8\">\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n                      <p className=\"text-gray-600\">Uploading image...</p>\n                    </div>\n                  )}\n\n                  {uploadState === 'analyzing' && (\n                    <div className=\"text-center p-8\">\n                      <div className=\"animate-pulse\">\n                        <div className=\"w-12 h-12 bg-blue-100 rounded-full mx-auto mb-4 flex items-center justify-center\">\n                          <span className=\"text-2xl\">üß†</span>\n                        </div>\n                      </div>\n                      <p className=\"text-gray-600\">AI is analyzing the image...</p>\n                      <p className=\"text-sm text-gray-500 mt-2\">This may take a few seconds</p>\n                    </div>\n                  )}\n\n                  {uploadState === 'completed' && analysisResult && (\n                    <div className=\"space-y-6\">\n                      {/* Main Result */}\n                      <div className=\"text-center p-6 bg-gray-50 rounded-lg\">\n                        <div className=\"text-4xl mb-2\">{getResultIcon()}</div>\n                        <h4 className={`text-2xl font-bold ${getResultColor()}`}>\n                          {analysisResult.analysis.result}\n                        </h4>\n                        <p className=\"text-gray-600 mt-2\">\n                          Confidence: {(analysisResult.analysis.confidence * 100).toFixed(1)}%\n                        </p>\n                      </div>\n\n                      {/* Analysis Details */}\n                      <div>\n                        <h5 className=\"font-semibold mb-3\">Detection Indicators:</h5>\n                        <ul className=\"space-y-2\">\n                          {analysisResult.analysis.indicators.map((indicator, index) => (\n                            <li key={index} className=\"flex items-start\">\n                              <span className=\"text-blue-500 mr-2\">‚Ä¢</span>\n                              <span className=\"text-gray-700\">{indicator}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n\n                      {/* Technical Info */}\n                      <div className=\"bg-gray-50 p-4 rounded-lg\">\n                        <h5 className=\"font-semibold mb-2\">Technical Details:</h5>\n                        <div className=\"text-sm text-gray-600 space-y-1\">\n                          <p>Processing Time: {analysisResult.processing_time.toFixed(2)}s</p>\n                          <p>Model Version: {analysisResult.model_version}</p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"mt-8 flex justify-center space-x-4\">\n                <button\n                  onClick={resetAnalysis}\n                  className=\"px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\"\n                >\n                  Analyze Another Image\n                </button>\n                <button\n                  onClick={() => window.history.back()}\n                  className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n                >\n                  Back to Dashboard\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Information Panel */}\n        <div className=\"bg-white rounded-xl shadow-lg p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">How It Works</h3>\n          <div className=\"grid md:grid-cols-3 gap-6 text-sm\">\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full mx-auto mb-3 flex items-center justify-center\">\n                <span className=\"text-2xl\">üì§</span>\n              </div>\n              <h4 className=\"font-medium mb-2\">Upload</h4>\n              <p className=\"text-gray-600\">Upload your image for analysis</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full mx-auto mb-3 flex items-center justify-center\">\n                <span className=\"text-2xl\">üîç</span>\n              </div>\n              <h4 className=\"font-medium mb-2\">Analyze</h4>\n              <p className=\"text-gray-600\">AI examines pixel patterns and artifacts</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full mx-auto mb-3 flex items-center justify-center\">\n                <span className=\"text-2xl\">üìä</span>\n              </div>\n              <h4 className=\"font-medium mb-2\">Results</h4>\n              <p className=\"text-gray-600\">Get detailed authenticity report</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ContentAuthentication;","size_bytes":11833},"frontend/src/components/Dashboard.js":{"content":"import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { AuthContext } from '../App';\nimport { \n  Brain, \n  Image, \n  FileText, \n  Target, \n  Trophy, \n  BarChart3, \n  Zap,\n  Timer,\n  Users,\n  Puzzle,\n  PenTool,\n  Volume2,\n  ShieldCheck\n} from 'lucide-react';\n\nconst Dashboard = () => {\n  const { user } = useContext(AuthContext);\n\n  const games = [\n    {\n      id: 'ai-image',\n      title: 'AI Image Detection',\n      description: 'Can you spot the difference between AI-generated and real images? Test your visual perception against advanced AI models.',\n      icon: Image,\n      route: '/game/ai-image',\n      difficulty: 'Medium',\n      estimatedTime: '5-10 min',\n      color: 'from-blue-500 to-cyan-500'\n    },\n    {\n      id: 'text-ai',\n      title: 'Text or AI',\n      description: 'Identify whether text snippets were written by humans or AI. Challenge your language intuition.',\n      icon: FileText,\n      route: '/game/text-ai',\n      difficulty: 'Hard',\n      estimatedTime: '8-12 min',\n      color: 'from-purple-500 to-pink-500'\n    },\n    {\n      id: 'memory',\n      title: 'Memory Challenge',\n      description: 'Remember and recall number sequences. Compare your memory capacity with AI systems.',\n      icon: Target,\n      route: '/game/memory',\n      difficulty: 'Easy',\n      estimatedTime: '3-7 min',\n      color: 'from-green-500 to-emerald-500'\n    },\n    {\n      id: 'logical-reasoning',\n      title: 'Logical Reasoning',\n      description: 'Solve number sequences, pattern puzzles, and logic problems. Challenge your analytical thinking against AI logic.',\n      icon: Puzzle,\n      route: '/game/logical-reasoning',\n      difficulty: 'Medium',\n      estimatedTime: '4-8 min',\n      color: 'from-indigo-500 to-purple-500'\n    },\n    {\n      id: 'creative-writing',\n      title: 'Creative Writing',\n      description: 'Write creative stories and poems from prompts. Compare your imagination and writing style with AI creativity.',\n      icon: PenTool,\n      route: '/game/creative-writing',\n      difficulty: 'Hard',\n      estimatedTime: '10-15 min',\n      color: 'from-purple-500 to-pink-500'\n    },\n    {\n      id: 'audio-recognition',\n      title: 'Audio Recognition',\n      description: 'Listen to audio clips and identify whether they were created by humans or generated by AI. Test your auditory perception.',\n      icon: Volume2,\n      route: '/game/audio-recognition',\n      difficulty: 'Medium',\n      estimatedTime: '6-10 min',\n      color: 'from-green-500 to-teal-500'\n    }\n  ];\n\n  const tools = [\n    {\n      id: 'content-auth',\n      title: 'Content Authentication',\n      description: 'Upload images to detect if they are authentic or AI-generated. Advanced detection using state-of-the-art models.',\n      icon: ShieldCheck,\n      route: '/content-authentication',\n      category: 'Detection Tool',\n      color: 'from-blue-500 to-indigo-500'\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-slate-950\">\n      {/* Navigation */}\n      <nav className=\"navbar\">\n        <div className=\"nav-content\">\n          <Link to=\"/dashboard\" className=\"nav-brand\">\n            CognitiveArena\n          </Link>\n          <div className=\"nav-links\">\n            <Link to=\"/dashboard\" className=\"nav-link active\">\n              Dashboard\n            </Link>\n            <Link to=\"/leaderboard\" className=\"nav-link\">\n              Leaderboard\n            </Link>\n            <Link to=\"/stats\" className=\"nav-link\">\n              Stats\n            </Link>\n            {/* Auth removed: open access */}\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Welcome Section */}\n        <div className=\"mb-12\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-4xl font-bold text-white mb-4\">\n              Welcome back, <span className=\"bg-gradient-to-r from-cyan-400 to-purple-500 bg-clip-text text-transparent\">{user?.username}</span>\n            </h1>\n            <p className=\"text-xl text-slate-400\">Ready to challenge AI in cognitive tasks?</p>\n          </div>\n\n          {/* User Stats Quick View */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-12\">\n            <div className=\"bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-slate-700\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Trophy className=\"w-6 h-6 text-yellow-400\" />\n                <span className=\"text-slate-400\">Total Games</span>\n              </div>\n              <div className=\"text-2xl font-bold text-white\">{user?.total_games_played || 0}</div>\n            </div>\n            <div className=\"bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-slate-700\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Zap className=\"w-6 h-6 text-cyan-400\" />\n                <span className=\"text-slate-400\">Total Score</span>\n              </div>\n              <div className=\"text-2xl font-bold text-white\">{user?.total_score || 0}</div>\n            </div>\n            <div className=\"bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-slate-700\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Target className=\"w-6 h-6 text-green-400\" />\n                <span className=\"text-slate-400\">Avg Accuracy</span>\n              </div>\n              <div className=\"text-2xl font-bold text-white\">\n                {user?.total_games_played > 0 ? '85%' : '0%'}\n              </div>\n            </div>\n            <div className=\"bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-slate-700\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Users className=\"w-6 h-6 text-purple-400\" />\n                <span className=\"text-slate-400\">Rank</span>\n              </div>\n              <div className=\"text-2xl font-bold text-white\">\n                {user?.total_games_played > 0 ? '#42' : 'Unranked'}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Games Section */}\n        <div className=\"mb-12\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-white\">Cognitive Challenges</h2>\n            <Link \n              to=\"/leaderboard\" \n              className=\"flex items-center gap-2 px-4 py-2 bg-slate-800 hover:bg-slate-700 text-slate-300 rounded-lg transition-colors\"\n            >\n              <Trophy className=\"w-4 h-4\" />\n              View Leaderboard\n            </Link>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {games.map((game) => (\n              <div key={game.id} className=\"game-card group\">\n                <div className=\"relative z-10\">\n                  <div className={`inline-flex p-4 rounded-2xl bg-gradient-to-r ${game.color} bg-opacity-20 mb-6`}>\n                    <game.icon className=\"w-8 h-8 text-white\" />\n                  </div>\n                  \n                  <h3 className=\"game-title\">{game.title}</h3>\n                  <p className=\"game-description\">{game.description}</p>\n                  \n                  <div className=\"flex items-center gap-4 mb-6\">\n                    <div className=\"flex items-center gap-2 text-slate-400 text-sm\">\n                      <Timer className=\"w-4 h-4\" />\n                      {game.estimatedTime}\n                    </div>\n                    <div className={`px-3 py-1 rounded-full text-xs font-medium ${\n                      game.difficulty === 'Easy' ? 'bg-green-500/20 text-green-400' :\n                      game.difficulty === 'Medium' ? 'bg-yellow-500/20 text-yellow-400' :\n                      'bg-red-500/20 text-red-400'\n                    }`}>\n                      {game.difficulty}\n                    </div>\n                  </div>\n                  \n                  <Link \n                    to={game.route}\n                    className=\"game-play-btn w-full justify-center\"\n                  >\n                    <Brain className=\"w-5 h-5\" />\n                    Start Challenge\n                  </Link>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Tools Section */}\n        <div className=\"mb-12\">\n          <div className=\"flex justify-between items-center mb-8\">\n            <h2 className=\"text-3xl font-bold text-white\">Detection Tools</h2>\n            <div className=\"flex items-center gap-2 px-4 py-2 bg-slate-800 text-slate-300 rounded-lg\">\n              <ShieldCheck className=\"w-4 h-4\" />\n              AI Detection\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {tools.map((tool) => (\n              <div key={tool.id} className=\"game-card group\">\n                <div className=\"relative z-10\">\n                  <div className={`inline-flex p-4 rounded-2xl bg-gradient-to-r ${tool.color} bg-opacity-20 mb-6`}>\n                    <tool.icon className=\"w-8 h-8 text-white\" />\n                  </div>\n                  \n                  <h3 className=\"game-title\">{tool.title}</h3>\n                  <p className=\"game-description\">{tool.description}</p>\n                  \n                  <div className=\"flex items-center gap-4 mb-6\">\n                    <div className={`px-3 py-1 rounded-full text-xs font-medium bg-blue-500/20 text-blue-400`}>\n                      {tool.category}\n                    </div>\n                  </div>\n                  \n                  <Link \n                    to={tool.route}\n                    className=\"game-play-btn w-full justify-center\"\n                  >\n                    <ShieldCheck className=\"w-5 h-5\" />\n                    Use Tool\n                  </Link>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* AI Performance Insight */}\n        <div className=\"bg-gradient-to-r from-slate-800/50 to-slate-900/50 backdrop-blur-sm rounded-2xl p-8 border border-slate-700\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <BarChart3 className=\"w-6 h-6 text-cyan-400\" />\n            <h3 className=\"text-2xl font-bold text-white\">AI Performance Baseline</h3>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-cyan-400 mb-2\">92.5%</div>\n              <div className=\"text-slate-300 font-medium\">AI Image Detection</div>\n              <div className=\"text-sm text-slate-500\">Average AI accuracy</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-purple-400 mb-2\">88.7%</div>\n              <div className=\"text-slate-300 font-medium\">Text Analysis</div>\n              <div className=\"text-sm text-slate-500\">Average AI accuracy</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-green-400 mb-2\">78.3%</div>\n              <div className=\"text-slate-300 font-medium\">Memory Tasks</div>\n              <div className=\"text-sm text-slate-500\">Average AI accuracy</div>\n            </div>\n          </div>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-slate-400\">\n              These are the baselines you're competing against. Can human intuition beat artificial intelligence?\n            </p>\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"mt-12 text-center\">\n          <h3 className=\"text-xl font-bold text-white mb-6\">Quick Actions</h3>\n          <div className=\"flex justify-center gap-4\">\n            <Link \n              to=\"/stats\" \n              className=\"flex items-center gap-2 px-6 py-3 bg-slate-800 hover:bg-slate-700 text-slate-300 rounded-lg transition-colors\"\n            >\n              <BarChart3 className=\"w-4 h-4\" />\n              View Detailed Stats\n            </Link>\n            <Link \n              to=\"/leaderboard\" \n              className=\"flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-cyan-500 to-purple-600 text-white rounded-lg hover:shadow-lg transition-all\"\n            >\n              <Trophy className=\"w-4 h-4\" />\n              Global Leaderboard\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;","size_bytes":12522},"frontend/src/components/LandingPage.js":{"content":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Brain, Zap, Target, Trophy, Users, BarChart } from 'lucide-react';\n\nconst LandingPage = () => {\n  const features = [\n    {\n      icon: Brain,\n      title: \"AI Image Detection\",\n      description: \"Test your ability to distinguish between AI-generated and real images. Compare your perception against advanced AI models.\"\n    },\n    {\n      icon: Zap,\n      title: \"Text Analysis Challenge\",\n      description: \"Can you identify AI-written text? Challenge yourself against GPT-5, Claude, and Gemini in detecting artificial content.\"\n    },\n    {\n      icon: Target,\n      title: \"Memory Mastery\",\n      description: \"Push your cognitive limits with sequence memory challenges. See how your recall compares to AI memory systems.\"\n    },\n    {\n      icon: Trophy,\n      title: \"Logic Puzzles\",\n      description: \"Solve complex reasoning problems and compare your logical thinking speed against AI problem-solving algorithms.\"\n    },\n    {\n      icon: Users,\n      title: \"Global Leaderboard\",\n      description: \"Compete with humans worldwide and see how humanity stacks up against the latest AI models.\"\n    },\n    {\n      icon: BarChart,\n      title: \"Performance Analytics\",\n      description: \"Track your cognitive performance over time and identify areas where humans excel or fall behind AI.\"\n    }\n  ];\n\n  return (\n    <div className=\"landing-hero\">\n      <div className=\"max-w-7xl mx-auto px-4 py-16\">\n        {/* Navigation */}\n        <nav className=\"flex justify-between items-center mb-16\">\n          <div className=\"text-2xl font-bold bg-gradient-to-r from-cyan-400 to-purple-500 bg-clip-text text-transparent\">\n            CognitiveArena\n          </div>\n          <div className=\"flex gap-4\">\n            <Link to=\"/dashboard\" className=\"px-6 py-3 text-slate-300 hover:text-cyan-400 transition-colors font-medium\">\n              Dashboard\n            </Link>\n            <Link to=\"/leaderboard\" className=\"px-6 py-3 bg-gradient-to-r from-cyan-500 to-purple-600 text-white rounded-lg hover:shadow-lg hover:shadow-cyan-500/25 transition-all duration-300 font-medium\">\n              View Leaderboard\n            </Link>\n          </div>\n        </nav>\n\n        {/* Hero Section */}\n        <div className=\"text-center mb-20\">\n          <h1 className=\"hero-title\">\n            Human vs AI\n            <br />\n            Cognitive Arena\n          </h1>\n          <p className=\"hero-subtitle\">\n            Challenge the world's most advanced AI models in cognitive tasks. \n            Discover where human intelligence shines and where AI dominates.\n          </p>\n          <div className=\"flex justify-center gap-6 mt-8\">\n            <Link \n              to=\"/dashboard\" \n              className=\"px-8 py-4 bg-gradient-to-r from-cyan-500 to-purple-600 text-white text-lg font-semibold rounded-xl hover:shadow-xl hover:shadow-cyan-500/25 transition-all duration-300 transform hover:-translate-y-1\"\n            >\n              Start Challenging AI\n            </Link>\n            <Link \n              to=\"/leaderboard\" \n              className=\"px-8 py-4 border border-slate-600 text-slate-300 text-lg font-semibold rounded-xl hover:border-cyan-400 hover:text-cyan-400 transition-all duration-300\"\n            >\n              View Leaderboard\n            </Link>\n          </div>\n        </div>\n\n        {/* Hero Images Grid */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-20 opacity-80\">\n          <div className=\"aspect-square rounded-xl overflow-hidden\">\n            <img \n              src=\"https://images.unsplash.com/photo-1673255745677-e36f618550d1?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NDQ2MzR8MHwxfHNlYXJjaHwxfHxBSSUyMGJyYWluJTIwdGVjaG5vbG9neXxlbnwwfHx8fDE3NTY5ODExODV8MA&ixlib=rb-4.1.0&q=85\" \n              alt=\"AI Technology\" \n              className=\"w-full h-full object-cover hover:scale-110 transition-transform duration-500\"\n            />\n          </div>\n          <div className=\"aspect-square rounded-xl overflow-hidden\">\n            <img \n              src=\"https://images.unsplash.com/photo-1549925245-f20a1bac6454?crop=entropy&cs=srgb&fm=jpg&ixid=M3w3NDQ2MzR8MHwxfHNlYXJjaHwyfHxBSSUyMGJyYWluJTIwdGVjaG5vbG9neXxlbnwwfHx8fDE3NTY5ODExODV8MA&ixlib=rb-4.1.0&q=85\" \n              alt=\"Brain Visualization\" \n              className=\"w-full h-full object-cover hover:scale-110 transition-transform duration-500\"\n            />\n          </div>\n          <div className=\"aspect-square rounded-xl overflow-hidden\">\n            <img \n              src=\"https://images.pexels.com/photos/8438864/pexels-photo-8438864.jpeg\" \n              alt=\"Robot Chess\" \n              className=\"w-full h-full object-cover hover:scale-110 transition-transform duration-500\"\n            />\n          </div>\n          <div className=\"aspect-square rounded-xl overflow-hidden\">\n            <img \n              src=\"https://images.pexels.com/photos/8438954/pexels-photo-8438954.jpeg\" \n              alt=\"AI vs Human\" \n              className=\"w-full h-full object-cover hover:scale-110 transition-transform duration-500\"\n            />\n          </div>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"feature-grid\">\n          {features.map((feature, index) => (\n            <div key={index} className=\"feature-card\">\n              <feature.icon className=\"feature-icon\" />\n              <h3 className=\"feature-title\">{feature.title}</h3>\n              <p className=\"feature-description\">{feature.description}</p>\n            </div>\n          ))}\n        </div>\n\n        {/* Stats Section */}\n        <div className=\"mt-20 text-center\">\n          <h2 className=\"text-3xl font-bold text-white mb-8\">The Battle Stats</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-slate-700\">\n              <div className=\"text-3xl font-bold text-cyan-400 mb-2\">92.5%</div>\n              <div className=\"text-slate-300\">AI Average Accuracy</div>\n              <div className=\"text-sm text-slate-400 mt-1\">Across all cognitive tasks</div>\n            </div>\n            <div className=\"bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-slate-700\">\n              <div className=\"text-3xl font-bold text-purple-400 mb-2\">87.3%</div>\n              <div className=\"text-slate-300\">Human Average Accuracy</div>\n              <div className=\"text-sm text-slate-400 mt-1\">The gap is closing!</div>\n            </div>\n            <div className=\"bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-slate-700\">\n              <div className=\"text-3xl font-bold text-green-400 mb-2\">15</div>\n              <div className=\"text-slate-300\">Tasks Where Humans Win</div>\n              <div className=\"text-sm text-slate-400 mt-1\">Creative and intuitive challenges</div>\n            </div>\n          </div>\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"mt-20 text-center\">\n          <div className=\"bg-gradient-to-r from-cyan-500/10 to-purple-500/10 backdrop-blur-sm rounded-2xl p-12 border border-cyan-500/20\">\n            <h2 className=\"text-4xl font-bold text-white mb-4\">Ready to Test Your Mind?</h2>\n            <p className=\"text-xl text-slate-300 mb-8 max-w-2xl mx-auto\">\n              Join thousands of humans challenging AI in the ultimate cognitive arena. \n              Discover your strengths and push the boundaries of human intelligence.\n            </p>\n            <Link \n              to=\"/dashboard\" \n              className=\"inline-flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-cyan-500 to-purple-600 text-white text-lg font-semibold rounded-xl hover:shadow-xl hover:shadow-cyan-500/25 transition-all duration-300 transform hover:-translate-y-1\"\n            >\n              <Brain className=\"w-6 h-6\" />\n              Enter the Arena\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LandingPage;","size_bytes":8014},"frontend/src/components/Leaderboard.js":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { API } from '../App';\nimport { Trophy, Crown, Medal, Zap, Users, Bot, ArrowLeft } from 'lucide-react';\n\nconst Leaderboard = () => {\n  const [leaderboardData, setLeaderboardData] = useState({\n    human_leaders: [],\n    ai_baselines: []\n  });\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchLeaderboard();\n  }, []);\n\n  const fetchLeaderboard = async () => {\n    try {\n      const response = await axios.get(`${API}/leaderboard`);\n      setLeaderboardData(response.data);\n    } catch (error) {\n      console.error('Error fetching leaderboard:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getRankIcon = (rank) => {\n    switch (rank) {\n      case 1:\n        return <Crown className=\"w-6 h-6 text-yellow-400\" />;\n      case 2:\n        return <Medal className=\"w-6 h-6 text-gray-400\" />;  \n      case 3:\n        return <Medal className=\"w-6 h-6 text-amber-600\" />;\n      default:\n        return <span className=\"w-6 h-6 flex items-center justify-center text-slate-400 font-bold\">#{rank}</span>;\n    }\n  };\n\n  const getRankBadge = (rank) => {\n    if (rank <= 3) {\n      return `rank-${rank}`;\n    }\n    return '';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-slate-950 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-cyan-400\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-950\">\n      {/* Navigation */}\n      <nav className=\"navbar\">\n        <div className=\"nav-content\">\n          <Link to=\"/dashboard\" className=\"nav-brand\">\n            CognitiveArena\n          </Link>\n          <div className=\"nav-links\">\n            <Link to=\"/dashboard\" className=\"nav-link\">\n              Dashboard\n            </Link>\n            <Link to=\"/leaderboard\" className=\"nav-link active\">\n              Leaderboard\n            </Link>\n            <Link to=\"/stats\" className=\"nav-link\">\n              Stats\n            </Link>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"max-w-6xl mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <Link \n            to=\"/dashboard\"\n            className=\"inline-flex items-center gap-2 text-slate-400 hover:text-cyan-400 transition-colors mb-6\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            Back to Dashboard\n          </Link>\n          \n          <h1 className=\"leaderboard-title\">Global Leaderboard</h1>\n          <p className=\"text-xl text-slate-400 mb-8\">\n            The ultimate showdown: Human intelligence vs Artificial intelligence\n          </p>\n          \n          {/* Stats Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <div className=\"bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-slate-700\">\n              <div className=\"flex items-center justify-center gap-2 mb-2\">\n                <Users className=\"w-6 h-6 text-green-400\" />\n                <span className=\"text-slate-300 font-medium\">Human Champions</span>\n              </div>\n              <div className=\"text-2xl font-bold text-green-400\">{leaderboardData.human_leaders.length}</div>\n            </div>\n            <div className=\"bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-slate-700\">\n              <div className=\"flex items-center justify-center gap-2 mb-2\">\n                <Bot className=\"w-6 h-6 text-purple-400\" />\n                <span className=\"text-slate-300 font-medium\">AI Models</span>\n              </div>\n              <div className=\"text-2xl font-bold text-purple-400\">{leaderboardData.ai_baselines.length}</div>\n            </div>\n            <div className=\"bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-slate-700\">\n              <div className=\"flex items-center justify-center gap-2 mb-2\">\n                <Zap className=\"w-6 h-6 text-cyan-400\" />\n                <span className=\"text-slate-300 font-medium\">Total Battles</span>\n              </div>\n              <div className=\"text-2xl font-bold text-cyan-400\">\n                {leaderboardData.human_leaders.reduce((sum, user) => sum + (user.total_games_played || 0), 0)}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Leaderboard Grid */}\n        <div className=\"leaderboard-grid\">\n          {/* Human Leaderboard */}\n          <div className=\"leaderboard-section\">\n            <h2 className=\"section-title human\">\n              <Users className=\"w-6 h-6 inline mr-2\" />\n              Human Champions\n            </h2>\n            \n            {leaderboardData.human_leaders.length > 0 ? (\n              <ul className=\"leaderboard-list\">\n                {leaderboardData.human_leaders.map((user, index) => (\n                  <li key={user.id} className={`leaderboard-item ${index < 3 ? 'top-3' : ''}`}>\n                    <div className=\"flex items-center gap-3\">\n                      {getRankIcon(index + 1)}\n                      <div>\n                        <div className=\"leaderboard-name\">{user.username}</div>\n                        <div className=\"text-xs text-slate-500\">\n                          {user.total_games_played || 0} games played\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"leaderboard-score\">{user.total_score || 0}</div>\n                      <div className=\"text-xs text-slate-500\">points</div>\n                    </div>\n                  </li>\n                ))}\n              </ul>\n            ) : (\n              <div className=\"text-center py-8 text-slate-400\">\n                <Users className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                <p>No human players yet. Be the first champion!</p>\n              </div>\n            )}\n          </div>\n\n          {/* AI Baselines */}\n          <div className=\"leaderboard-section\">\n            <h2 className=\"section-title ai\">\n              <Bot className=\"w-6 h-6 inline mr-2\" />\n              AI Baselines\n            </h2>\n            \n            <ul className=\"leaderboard-list\">\n              {leaderboardData.ai_baselines.map((ai, index) => (\n                <li key={ai.name} className={`leaderboard-item ${index < 3 ? 'top-3' : ''}`}>\n                  <div className=\"flex items-center gap-3\">\n                    {getRankIcon(index + 1)}\n                    <div>\n                      <div className=\"leaderboard-name\">{ai.name}</div>\n                      <div className=\"text-xs text-slate-500\">\n                        {ai.games_played} games simulated\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"leaderboard-score text-purple-400\">{ai.total_score}</div>\n                    <div className=\"text-xs text-slate-500\">points</div>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n\n        {/* Combined Leaderboard */}\n        <div className=\"mt-12\">\n          <h2 className=\"text-2xl font-bold text-white text-center mb-8\">Ultimate Rankings</h2>\n          <div className=\"bg-slate-800/50 backdrop-blur-sm rounded-2xl p-6 border border-slate-700\">\n            <div className=\"space-y-3\">\n              {/* Combine and sort all participants */}\n              {[...leaderboardData.ai_baselines, ...leaderboardData.human_leaders]\n                .sort((a, b) => (b.total_score || 0) - (a.total_score || 0))\n                .slice(0, 10)\n                .map((participant, index) => (\n                  <div key={participant.name || participant.username} className=\"flex items-center justify-between p-4 bg-slate-900/50 rounded-lg\">\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"flex items-center gap-2\">\n                        {getRankIcon(index + 1)}\n                        {participant.is_ai ? (\n                          <Bot className=\"w-5 h-5 text-purple-400\" />\n                        ) : (\n                          <Users className=\"w-5 h-5 text-green-400\" />\n                        )}\n                      </div>\n                      <div>\n                        <div className=\"font-medium text-white\">\n                          {participant.name || participant.username}\n                        </div>\n                        <div className=\"text-sm text-slate-400\">\n                          {participant.is_ai ? 'AI Model' : 'Human Player'}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className={`text-lg font-bold ${participant.is_ai ? 'text-purple-400' : 'text-green-400'}`}>\n                        {participant.total_score || 0}\n                      </div>\n                      <div className=\"text-xs text-slate-500\">points</div>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"mt-12 text-center\">\n          <div className=\"bg-gradient-to-r from-cyan-500/10 to-purple-500/10 backdrop-blur-sm rounded-2xl p-8 border border-cyan-500/20\">\n            <Trophy className=\"w-12 h-12 text-cyan-400 mx-auto mb-4\" />\n            <h3 className=\"text-2xl font-bold text-white mb-4\">Ready to Climb the Rankings?</h3>\n            <p className=\"text-slate-400 mb-6\">\n              Challenge AI models and prove human intelligence can compete with artificial intelligence.\n            </p>\n            <Link \n              to=\"/dashboard\" \n              className=\"inline-flex items-center gap-2 px-8 py-3 bg-gradient-to-r from-cyan-500 to-purple-600 text-white rounded-lg hover:shadow-lg transition-all font-medium\"\n            >\n              <Zap className=\"w-5 h-5\" />\n              Start Competing\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Leaderboard;","size_bytes":10261},"frontend/src/components/LoginPage.js":{"content":"// Auth removed: redirect this route to dashboard\nexport default function LoginPage() { return null; }","size_bytes":102},"frontend/src/components/RegisterPage.js":{"content":"// Auth removed: redirect this route to dashboard\nexport default function RegisterPage() { return null; }","size_bytes":105},"frontend/src/components/UserStats.js":{"content":"import React, { useState, useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { AuthContext, API } from '../App';\nimport { \n  BarChart3, \n  TrendingUp, \n  Clock, \n  Target, \n  Trophy, \n  ArrowLeft,\n  Image,\n  FileText,\n  Brain,\n  Zap\n} from 'lucide-react';\n\nconst UserStats = () => {\n  const { user } = useContext(AuthContext);\n  const [stats, setStats] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchUserStats();\n  }, []);\n\n  const fetchUserStats = async () => {\n    try {\n      const response = await axios.get(`${API}/stats/user`);\n      setStats(response.data);\n    } catch (error) {\n      console.error('Error fetching user stats:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getGameIcon = (gameType) => {\n    switch (gameType) {\n      case 'ai_image':\n        return Image;\n      case 'text_ai':\n        return FileText;\n      case 'memory_challenge':\n        return Brain;\n      default:\n        return Target;\n    }\n  };\n\n  const getGameTitle = (gameType) => {\n    switch (gameType) {\n      case 'ai_image':\n        return 'AI Image Detection';\n      case 'text_ai':\n        return 'Text vs AI';\n      case 'memory_challenge':\n        return 'Memory Challenge';\n      default:\n        return 'Unknown Game';\n    }\n  };\n\n  const getGameColor = (gameType) => {\n    switch (gameType) {\n      case 'ai_image':\n        return 'from-blue-500 to-cyan-500';\n      case 'text_ai':\n        return 'from-purple-500 to-pink-500';\n      case 'memory_challenge':\n        return 'from-green-500 to-emerald-500';\n      default:\n        return 'from-slate-500 to-slate-600';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-slate-950 flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-cyan-400\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-950\">\n      {/* Navigation */}\n      <nav className=\"navbar\">\n        <div className=\"nav-content\">\n          <Link to=\"/dashboard\" className=\"nav-brand\">\n            CognitiveArena\n          </Link>\n          <div className=\"nav-links\">\n            <Link to=\"/dashboard\" className=\"nav-link\">\n              Dashboard\n            </Link>\n            <Link to=\"/leaderboard\" className=\"nav-link\">\n              Leaderboard\n            </Link>\n            <Link to=\"/stats\" className=\"nav-link active\">\n              Stats\n            </Link>\n          </div>\n        </div>\n      </nav>\n\n      <div className=\"max-w-6xl mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <Link \n            to=\"/dashboard\"\n            className=\"inline-flex items-center gap-2 text-slate-400 hover:text-cyan-400 transition-colors mb-6\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            Back to Dashboard\n          </Link>\n          \n          <h1 className=\"text-4xl font-bold text-white mb-4\">\n            Performance Analytics\n          </h1>\n          <p className=\"text-xl text-slate-400\">\n            Track your cognitive performance across all challenges\n          </p>\n        </div>\n\n        {/* Overall Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-12\">\n          <div className=\"bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-slate-700\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <Trophy className=\"w-6 h-6 text-yellow-400\" />\n              <span className=\"text-slate-400\">Total Games</span>\n            </div>\n            <div className=\"text-3xl font-bold text-white mb-1\">\n              {stats?.total_games || 0}\n            </div>\n            <div className=\"text-sm text-slate-500\">Challenges completed</div>\n          </div>\n\n          <div className=\"bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-slate-700\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <Zap className=\"w-6 h-6 text-cyan-400\" />\n              <span className=\"text-slate-400\">Total Score</span>\n            </div>\n            <div className=\"text-3xl font-bold text-white mb-1\">\n              {user?.total_score || 0}\n            </div>\n            <div className=\"text-sm text-slate-500\">Points earned</div>\n          </div>\n\n          <div className=\"bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-slate-700\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <Target className=\"w-6 h-6 text-green-400\" />\n              <span className=\"text-slate-400\">Avg Accuracy</span>\n            </div>\n            <div className=\"text-3xl font-bold text-white mb-1\">\n              {stats?.total_games > 0 ? \n                Math.round(\n                  Object.values(stats.user_stats).reduce((sum, stat) => sum + (stat.avg_accuracy || 0), 0) / \n                  Object.keys(stats.user_stats).length\n                ) : 0\n              }%\n            </div>\n            <div className=\"text-sm text-slate-500\">Across all games</div>\n          </div>\n\n          <div className=\"bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-slate-700\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <TrendingUp className=\"w-6 h-6 text-purple-400\" />\n              <span className=\"text-slate-400\">Rank</span>\n            </div>\n            <div className=\"text-3xl font-bold text-white mb-1\">\n              {stats?.total_games > 0 ? '#42' : 'N/A'}\n            </div>\n            <div className=\"text-sm text-slate-500\">Global ranking</div>\n          </div>\n        </div>\n\n        {/* Game-Specific Stats */}\n        <div className=\"mb-12\">\n          <h2 className=\"text-2xl font-bold text-white mb-8 flex items-center gap-3\">\n            <BarChart3 className=\"w-6 h-6 text-cyan-400\" />\n            Game Performance Breakdown\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {stats && Object.entries(stats.user_stats).map(([gameType, gameStat]) => {\n              const GameIcon = getGameIcon(gameType);\n              const gameTitle = getGameTitle(gameType);\n              const gameColor = getGameColor(gameType);\n              \n              return (\n                <div key={gameType} className=\"bg-slate-800/50 backdrop-blur-sm rounded-xl p-6 border border-slate-700\">\n                  <div className=\"flex items-center gap-3 mb-6\">\n                    <div className={`p-3 rounded-xl bg-gradient-to-r ${gameColor} bg-opacity-20`}>\n                      <GameIcon className=\"w-6 h-6 text-white\" />\n                    </div>\n                    <h3 className=\"text-xl font-bold text-white\">{gameTitle}</h3>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-400\">Games Played</span>\n                      <span className=\"text-white font-semibold\">{gameStat.games_played}</span>\n                    </div>\n                    \n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-400\">Best Score</span>\n                      <span className=\"text-white font-semibold\">{gameStat.best_score}</span>\n                    </div>\n                    \n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-400\">Avg Accuracy</span>\n                      <span className=\"text-white font-semibold\">{gameStat.avg_accuracy}%</span>\n                    </div>\n                    \n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-400\">Avg Time</span>\n                      <span className=\"text-white font-semibold\">{gameStat.avg_time}s</span>\n                    </div>\n                    \n                    {/* Progress Bar for Accuracy */}\n                    <div className=\"mt-4\">\n                      <div className=\"flex justify-between text-sm mb-2\">\n                        <span className=\"text-slate-500\">Accuracy Progress</span>\n                        <span className=\"text-slate-400\">{gameStat.avg_accuracy}%</span>\n                      </div>\n                      <div className=\"w-full bg-slate-700 rounded-full h-2\">\n                        <div \n                          className={`h-2 rounded-full bg-gradient-to-r ${gameColor}`}\n                          style={{ width: `${gameStat.avg_accuracy}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n\n        {/* Performance Insights */}\n        <div className=\"bg-gradient-to-r from-slate-800/50 to-slate-900/50 backdrop-blur-sm rounded-2xl p-8 border border-slate-700\">\n          <h2 className=\"text-2xl font-bold text-white mb-6 flex items-center gap-3\">\n            <TrendingUp className=\"w-6 h-6 text-cyan-400\" />\n            Performance Insights\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-white mb-4\">Strengths</h3>\n              <div className=\"space-y-3\">\n                {stats && Object.entries(stats.user_stats)\n                  .sort((a, b) => b[1].avg_accuracy - a[1].avg_accuracy)\n                  .slice(0, 2)\n                  .map(([gameType, gameStat]) => (\n                    <div key={gameType} className=\"flex items-center gap-3 p-3 bg-green-500/10 border border-green-500/20 rounded-lg\">\n                      <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                      <span className=\"text-green-400 font-medium\">{getGameTitle(gameType)}</span>\n                      <span className=\"text-green-300 text-sm\">({gameStat.avg_accuracy}% accuracy)</span>\n                    </div>\n                  ))\n                }\n                {(!stats || Object.keys(stats.user_stats).length === 0) && (\n                  <div className=\"text-slate-400 italic\">Play some games to see your strengths!</div>\n                )}\n              </div>\n            </div>\n            \n            <div>\n              <h3 className=\"text-lg font-semibold text-white mb-4\">Areas for Improvement</h3>\n              <div className=\"space-y-3\">\n                {stats && Object.entries(stats.user_stats)\n                  .sort((a, b) => a[1].avg_accuracy - b[1].avg_accuracy)\n                  .slice(0, 2)\n                  .map(([gameType, gameStat]) => (\n                    <div key={gameType} className=\"flex items-center gap-3 p-3 bg-yellow-500/10 border border-yellow-500/20 rounded-lg\">\n                      <div className=\"w-2 h-2 bg-yellow-400 rounded-full\"></div>\n                      <span className=\"text-yellow-400 font-medium\">{getGameTitle(gameType)}</span>\n                      <span className=\"text-yellow-300 text-sm\">({gameStat.avg_accuracy}% accuracy)</span>\n                    </div>\n                  ))\n                }\n                {(!stats || Object.keys(stats.user_stats).length === 0) && (\n                  <div className=\"text-slate-400 italic\">Complete more challenges to get insights!</div>\n                )}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mt-8 p-4 bg-cyan-500/10 border border-cyan-500/20 rounded-lg\">\n            <h4 className=\"text-cyan-400 font-semibold mb-2\">üí° Pro Tip</h4>\n            <p className=\"text-slate-300 text-sm\">\n              Consistent practice in your weaker areas can significantly improve your overall cognitive performance. \n              Focus on accuracy first, then work on speed!\n            </p>\n          </div>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"mt-12 text-center\">\n          <Link \n            to=\"/dashboard\" \n            className=\"inline-flex items-center gap-2 px-8 py-3 bg-gradient-to-r from-cyan-500 to-purple-600 text-white rounded-lg hover:shadow-lg transition-all font-medium\"\n          >\n            <Brain className=\"w-5 h-5\" />\n            Continue Training\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserStats;","size_bytes":12433},"frontend/src/hooks/use-toast.js":{"content":"\"use client\";\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\"\n}\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString();\n}\n\nconst toastTimeouts = new Map()\n\nconst addToRemoveQueue = (toastId) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n}\n\nconst listeners = []\n\nlet memoryState = { toasts: [] }\n\nfunction dispatch(action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\nfunction toast({\n  ...props\n}) {\n  const id = genId()\n\n  const update = (props) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    };\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}\n\nexport { useToast, toast }\n","size_bytes":3085},"frontend/src/lib/utils.js":{"content":"import { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n","size_bytes":137},"frontend/src/components/games/GameAIImage.js":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { API } from '../../App';\nimport { ArrowLeft, Eye, Brain, Clock, Target, CheckCircle, XCircle } from 'lucide-react';\n\nconst GameAIImage = () => {\n  const [gameData, setGameData] = useState(null);\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [gameState, setGameState] = useState('loading'); // loading, playing, finished\n  const [timeLeft, setTimeLeft] = useState(30);\n  const [startTime, setStartTime] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showResult, setShowResult] = useState(false);\n  \n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchGameData();\n  }, []);\n\n  useEffect(() => {\n    if (gameState === 'playing' && timeLeft > 0) {\n      const timer = setTimeout(() => {\n        setTimeLeft(timeLeft - 1);\n      }, 1000);\n      return () => clearTimeout(timer);\n    } else if (gameState === 'playing' && timeLeft === 0) {\n      handleAnswer(null); // Time's up, auto-submit\n    }\n  }, [gameState, timeLeft]);\n\n  const fetchGameData = async () => {\n    try {\n      const response = await axios.get(`${API}/games/ai-image/data`);\n      setGameData(response.data);\n      setGameState('playing');\n      setStartTime(Date.now());\n    } catch (error) {\n      console.error('Error fetching game data:', error);\n    }\n  };\n\n  const handleAnswer = async (isAI) => {\n    if (selectedAnswer !== null || !gameData) return;\n\n    const currentImage = gameData.images[currentImageIndex];\n    const isCorrect = isAI === currentImage.is_ai;\n    \n    setSelectedAnswer(isAI);\n    setShowResult(true);\n    \n    const newAnswer = {\n      imageId: currentImage.id,\n      userAnswer: isAI,\n      correctAnswer: currentImage.is_ai,\n      isCorrect: isCorrect,\n      timeSpent: 30 - timeLeft\n    };\n    \n    const updatedAnswers = [...answers, newAnswer];\n    setAnswers(updatedAnswers);\n    \n    if (isCorrect) {\n      const timeBonus = Math.max(0, timeLeft * 2);\n      setScore(score + 100 + timeBonus);\n    }\n\n    // Wait 2 seconds to show result, then move to next image\n    setTimeout(() => {\n      if (currentImageIndex < gameData.images.length - 1) {\n        setCurrentImageIndex(currentImageIndex + 1);\n        setSelectedAnswer(null);\n        setShowResult(false);\n        setTimeLeft(30);\n      } else {\n        finishGame(updatedAnswers);\n      }\n    }, 2000);\n  };\n\n  const finishGame = async (finalAnswers) => {\n    const endTime = Date.now();\n    const totalTime = Math.round((endTime - startTime) / 1000);\n    const correctAnswers = finalAnswers.filter(a => a.isCorrect).length;\n    const accuracy = (correctAnswers / finalAnswers.length) * 100;\n\n    setGameState('finished');\n\n    try {\n      const response = await axios.post(`${API}/games/score`, {\n        game_type: 'ai_image',\n        score: score,\n        accuracy: accuracy,\n        time_taken: totalTime\n      });\n      \n      console.log('Score submitted:', response.data);\n    } catch (error) {\n      console.error('Error submitting score:', error);\n    }\n  };\n\n  const restartGame = () => {\n    setCurrentImageIndex(0);\n    setScore(0);\n    setAnswers([]);\n    setTimeLeft(30);\n    setSelectedAnswer(null);\n    setShowResult(false);\n    fetchGameData();\n  };\n\n  if (gameState === 'loading' || !gameData) {\n    return (\n      <div className=\"game-container\">\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-cyan-400\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (gameState === 'finished') {\n    const correctAnswers = answers.filter(a => a.isCorrect).length;\n    const accuracy = (correctAnswers / answers.length) * 100;\n    const aiBaselineScore = Math.round(score * 0.925); // Simulated AI baseline\n\n    return (\n      <div className=\"game-container\">\n        <div className=\"game-content\">\n          <Link \n            to=\"/dashboard\"\n            className=\"inline-flex items-center gap-2 text-slate-400 hover:text-cyan-400 transition-colors mb-6\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            Back to Dashboard\n          </Link>\n\n          <div className=\"results-screen\">\n            <h1 className=\"results-title\">Game Complete!</h1>\n            \n            <div className=\"results-comparison\">\n              <div className=\"comparison-item\">\n                <div className=\"comparison-label\">Your Performance</div>\n                <div className=\"comparison-score\">{score}</div>\n                <div className=\"text-sm text-slate-400 mt-2\">\n                  {correctAnswers}/{answers.length} correct ({accuracy.toFixed(1)}% accuracy)\n                </div>\n              </div>\n              \n              <div className=\"comparison-item ai\">\n                <div className=\"comparison-label\">AI Baseline</div>\n                <div className=\"comparison-score\">{aiBaselineScore}</div>\n                <div className=\"text-sm text-slate-400 mt-2\">\n                  GPT-5 Performance (92.5% accuracy)\n                </div>\n              </div>\n            </div>\n\n            <div className=\"mt-6\">\n              {score > aiBaselineScore ? (\n                <div className=\"flex items-center justify-center gap-2 text-green-400 text-lg font-semibold\">\n                  <CheckCircle className=\"w-6 h-6\" />\n                  Congratulations! You beat the AI!\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center gap-2 text-purple-400 text-lg font-semibold\">\n                  <Brain className=\"w-6 h-6\" />\n                  AI performed better this time. Try again!\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex gap-4 justify-center mt-8\">\n              <button \n                onClick={restartGame}\n                className=\"px-6 py-3 bg-gradient-to-r from-cyan-500 to-purple-600 text-white rounded-lg hover:shadow-lg transition-all font-medium\"\n              >\n                Play Again\n              </button>\n              <Link \n                to=\"/dashboard\"\n                className=\"px-6 py-3 border border-slate-600 text-slate-300 rounded-lg hover:border-cyan-400 hover:text-cyan-400 transition-all font-medium\"\n              >\n                Dashboard\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const currentImage = gameData.images[currentImageIndex];\n  const progress = ((currentImageIndex + 1) / gameData.images.length) * 100;\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"game-content\">\n        <Link \n          to=\"/dashboard\"\n          className=\"inline-flex items-center gap-2 text-slate-400 hover:text-cyan-400 transition-colors mb-6\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n          Back to Dashboard\n        </Link>\n\n        <div className=\"game-header\">\n          <h1 className=\"game-title-main\">AI Image Detection</h1>\n          <p className=\"game-subtitle\">Is this image AI-generated or real? Trust your instincts!</p>\n        </div>\n\n        <div className=\"game-stats\">\n          <div className=\"stat-item\">\n            <div className=\"stat-label\">Score</div>\n            <div className=\"stat-value\">{score}</div>\n          </div>\n          <div className=\"stat-item\">\n            <div className=\"stat-label\">Image</div>\n            <div className=\"stat-value\">{currentImageIndex + 1}/{gameData.images.length}</div>\n          </div>\n          <div className=\"stat-item\">\n            <div className=\"stat-label\">Time</div>\n            <div className={`stat-value ${timeLeft <= 10 ? 'text-red-400' : ''}`}>\n              {timeLeft}s\n            </div>\n          </div>\n        </div>\n\n        <div className=\"game-progress\">\n          <div className=\"progress-bar\">\n            <div className=\"progress-fill\" style={{ width: `${progress}%` }}></div>\n          </div>\n          <p className=\"text-slate-400 text-sm mt-2\">Progress: {Math.round(progress)}%</p>\n        </div>\n\n        <div className=\"game-area\">\n          <img \n            src={currentImage.url} \n            alt=\"Challenge Image\"\n            className=\"game-image\"\n          />\n          \n          <div className=\"text-center mb-6\">\n            <h3 className=\"text-xl font-semibold text-white mb-2\">\n              Is this image AI-generated or real?\n            </h3>\n            <p className=\"text-slate-400\">{currentImage.description}</p>\n          </div>\n\n          {showResult ? (\n            <div className=\"text-center\">\n              <div className={`text-2xl font-bold mb-4 ${selectedAnswer === currentImage.is_ai ? 'text-green-400' : 'text-red-400'}`}>\n                {selectedAnswer === currentImage.is_ai ? 'Correct!' : 'Incorrect!'}\n              </div>\n              <div className=\"text-slate-400\">\n                This image is {currentImage.is_ai ? 'AI-generated' : 'real'}\n              </div>\n            </div>\n          ) : (\n            <div className=\"game-options\">\n              <button \n                onClick={() => handleAnswer(true)}\n                className=\"game-option-btn\"\n                disabled={selectedAnswer !== null}\n              >\n                <Brain className=\"w-5 h-5 mr-2\" />\n                AI Generated\n              </button>\n              <button \n                onClick={() => handleAnswer(false)}\n                className=\"game-option-btn\"\n                disabled={selectedAnswer !== null}\n              >\n                <Eye className=\"w-5 h-5 mr-2\" />\n                Real Image\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GameAIImage;","size_bytes":9882},"frontend/src/components/games/GameAudioRecognition.js":{"content":"import React, { useState, useEffect, useContext } from 'react';\nimport { AuthContext, API } from '../../App';\nimport axios from 'axios';\n\nconst GameAudioRecognition = () => {\n  const { user } = useContext(AuthContext);\n  const [audioClips, setAudioClips] = useState([]);\n  const [currentClipIndex, setCurrentClipIndex] = useState(0);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [gameState, setGameState] = useState('loading'); // loading, playing, submitted, results\n  const [results, setResults] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [gameStartTime, setGameStartTime] = useState(null);\n\n  useEffect(() => {\n    loadAudioClips();\n  }, []);\n\n  const loadAudioClips = async () => {\n    try {\n      setGameState('loading');\n      const response = await axios.get(`${API}/games/audio-recognition/data`);\n      setAudioClips(response.data.audio_clips);\n      setCurrentClipIndex(0);\n      setGameState('playing');\n      setGameStartTime(Date.now());\n    } catch (error) {\n      console.error('Error loading audio clips:', error);\n    }\n  };\n\n  const playAudio = () => {\n    const currentClip = audioClips[currentClipIndex];\n    if (currentClip) {\n      setIsPlaying(true);\n      const audio = new Audio(currentClip.url);\n      audio.play().catch(err => {\n        console.error('Error playing audio:', err);\n        setIsPlaying(false);\n      });\n      \n      audio.onended = () => {\n        setIsPlaying(false);\n      };\n      \n      audio.onerror = () => {\n        setIsPlaying(false);\n        console.error('Audio failed to load');\n      };\n    }\n  };\n\n  const handleAnswer = async (answer) => {\n    try {\n      setUserAnswer(answer);\n      setGameState('submitted');\n      \n      const currentClip = audioClips[currentClipIndex];\n      const timeUsed = Math.round((Date.now() - gameStartTime) / 1000);\n\n      const response = await axios.post(`${API}/games/audio-recognition/submit`, {\n        audio_id: currentClip.id,\n        user_answer: answer,\n        time_taken: timeUsed\n      });\n\n      setResults(response.data);\n      setGameState('results');\n    } catch (error) {\n      console.error('Error submitting answer:', error);\n    }\n  };\n\n  const nextClip = () => {\n    if (currentClipIndex < audioClips.length - 1) {\n      setCurrentClipIndex(currentClipIndex + 1);\n      setUserAnswer('');\n      setGameState('playing');\n      setGameStartTime(Date.now());\n      setResults(null);\n    } else {\n      // Game finished\n      setGameState('finished');\n    }\n  };\n\n  const restartGame = () => {\n    loadAudioClips();\n  };\n\n  if (gameState === 'loading') {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-teal-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading audio clips...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const currentClip = audioClips[currentClipIndex];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-teal-50 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-800 mb-2\">Audio Recognition</h1>\n          <p className=\"text-gray-600\">Can you tell human-made audio from AI-generated?</p>\n        </div>\n\n        {/* Progress */}\n        <div className=\"bg-white rounded-xl shadow-lg p-6 mb-6\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <span className=\"text-lg font-semibold\">Clip {currentClipIndex + 1} of {audioClips.length}</span>\n            <div className=\"flex space-x-2\">\n              {audioClips.map((_, index) => (\n                <div\n                  key={index}\n                  className={`w-3 h-3 rounded-full ${\n                    index < currentClipIndex ? 'bg-green-500' : \n                    index === currentClipIndex ? 'bg-blue-500' : 'bg-gray-300'\n                  }`}\n                ></div>\n              ))}\n            </div>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div \n              className=\"bg-green-500 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${((currentClipIndex + 1) / audioClips.length) * 100}%` }}\n            ></div>\n          </div>\n        </div>\n\n        {/* Audio Player */}\n        {(gameState === 'playing' || gameState === 'submitted') && currentClip && (\n          <div className=\"bg-white rounded-xl shadow-lg p-8 mb-6\">\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-2xl font-semibold mb-4\">Listen to this audio clip</h2>\n              <p className=\"text-gray-600 mb-6\">Duration: ~{currentClip.duration} seconds</p>\n              \n              {/* Audio Player Interface */}\n              <div className=\"bg-gray-50 rounded-xl p-8 mb-6\">\n                <div className=\"flex items-center justify-center space-x-4\">\n                  <button\n                    onClick={playAudio}\n                    disabled={isPlaying || gameState === 'submitted'}\n                    className={`flex items-center justify-center w-20 h-20 rounded-full text-white text-2xl font-bold transition-all ${\n                      isPlaying ? 'bg-gray-400 cursor-not-allowed' : 'bg-green-600 hover:bg-green-700'\n                    }`}\n                  >\n                    {isPlaying ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}\n                  </button>\n                </div>\n                <p className=\"text-sm text-gray-500 mt-4\">\n                  {isPlaying ? 'Playing...' : 'Click to play audio'}\n                </p>\n              </div>\n\n              {/* Answer Buttons */}\n              {gameState === 'playing' && (\n                <div className=\"space-y-4\">\n                  <p className=\"text-lg font-medium mb-6\">Is this audio human-made or AI-generated?</p>\n                  <div className=\"flex justify-center space-x-6\">\n                    <button\n                      onClick={() => handleAnswer('human')}\n                      className=\"px-8 py-4 bg-blue-600 text-white rounded-xl font-semibold hover:bg-blue-700 transition-colors text-lg\"\n                    >\n                      üé§ Human-Made\n                    </button>\n                    <button\n                      onClick={() => handleAnswer('ai')}\n                      className=\"px-8 py-4 bg-purple-600 text-white rounded-xl font-semibold hover:bg-purple-700 transition-colors text-lg\"\n                    >\n                      ü§ñ AI-Generated\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Results */}\n        {gameState === 'results' && results && (\n          <div className=\"bg-white rounded-xl shadow-lg p-8 mb-6\">\n            <h2 className=\"text-2xl font-bold text-center mb-6\">Result</h2>\n            \n            <div className=\"text-center mb-6\">\n              <div className={`text-6xl mb-4 ${results.correct ? 'text-green-600' : 'text-red-600'}`}>\n                {results.correct ? '‚úÖ' : '‚ùå'}\n              </div>\n              <h3 className={`text-2xl font-bold ${results.correct ? 'text-green-600' : 'text-red-600'}`}>\n                {results.correct ? 'Correct!' : 'Incorrect'}\n              </h3>\n              <p className=\"text-gray-600 mt-2\">\n                This audio was <strong>{results.correct_answer}</strong>-generated\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6 mb-6\">\n              <div className=\"text-center p-6 bg-blue-50 rounded-lg\">\n                <h4 className=\"text-lg font-semibold mb-2\">Your Answer</h4>\n                <p className=\"text-2xl font-bold text-blue-600 capitalize\">{userAnswer}</p>\n                <p className=\"text-gray-600 mt-2\">Score: {results.score}</p>\n              </div>\n              \n              <div className=\"text-center p-6 bg-gray-50 rounded-lg\">\n                <h4 className=\"text-lg font-semibold mb-2\">AI Accuracy</h4>\n                <p className=\"text-2xl font-bold text-gray-600\">94%</p>\n                <p className=\"text-gray-600 mt-2\">Baseline Performance</p>\n              </div>\n            </div>\n\n            <div className=\"p-4 bg-gray-50 rounded-lg mb-6\">\n              <p className=\"text-center text-gray-700\">{results.explanation}</p>\n            </div>\n\n            <div className=\"flex justify-center space-x-4\">\n              {currentClipIndex < audioClips.length - 1 ? (\n                <button\n                  onClick={nextClip}\n                  className=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n                >\n                  Next Clip\n                </button>\n              ) : (\n                <button\n                  onClick={restartGame}\n                  className=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n                >\n                  Play Again\n                </button>\n              )}\n              <button\n                onClick={() => window.history.back()}\n                className=\"px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\"\n              >\n                Back to Dashboard\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Game Finished */}\n        {gameState === 'finished' && (\n          <div className=\"bg-white rounded-xl shadow-lg p-8 text-center\">\n            <h2 className=\"text-3xl font-bold text-green-600 mb-4\">üéâ Game Complete!</h2>\n            <p className=\"text-gray-600 mb-6\">You've tested all audio clips</p>\n            <div className=\"flex justify-center space-x-4\">\n              <button\n                onClick={restartGame}\n                className=\"px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n              >\n                Play Again\n              </button>\n              <button\n                onClick={() => window.history.back()}\n                className=\"px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\"\n              >\n                Back to Dashboard\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GameAudioRecognition;","size_bytes":10463},"frontend/src/components/games/GameCreativeWriting.js":{"content":"import React, { useState, useEffect, useContext } from 'react';\nimport { AuthContext, API } from '../../App';\nimport axios from 'axios';\n\nconst GameCreativeWriting = () => {\n  const { user } = useContext(AuthContext);\n  const [prompt, setPrompt] = useState(null);\n  const [userWriting, setUserWriting] = useState('');\n  const [gameState, setGameState] = useState('loading'); // loading, writing, submitted, results\n  const [timeLeft, setTimeLeft] = useState(300); // 5 minutes\n  const [results, setResults] = useState(null);\n  const [wordCount, setWordCount] = useState(0);\n\n  useEffect(() => {\n    loadPrompt();\n  }, []);\n\n  useEffect(() => {\n    if (gameState === 'writing' && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (timeLeft === 0 && gameState === 'writing') {\n      handleSubmit();\n    }\n  }, [timeLeft, gameState]);\n\n  useEffect(() => {\n    setWordCount(userWriting.trim().split(/\\s+/).filter(word => word.length > 0).length);\n  }, [userWriting]);\n\n  const loadPrompt = async () => {\n    try {\n      setGameState('loading');\n      const response = await axios.get(`${API}/games/creative-writing/prompt`);\n      setPrompt(response.data);\n      setGameState('writing');\n      setTimeLeft(300);\n      setUserWriting('');\n    } catch (error) {\n      console.error('Error loading prompt:', error);\n    }\n  };\n\n  const handleSubmit = async () => {\n    try {\n      setGameState('submitted');\n      const timeUsed = 300 - timeLeft;\n\n      const response = await axios.post(`${API}/games/creative-writing/submit`, {\n        prompt_id: prompt.id,\n        user_writing: userWriting,\n        time_taken: timeUsed\n      });\n\n      setResults(response.data);\n      setGameState('results');\n    } catch (error) {\n      console.error('Error submitting writing:', error);\n    }\n  };\n\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getProgressColor = () => {\n    if (wordCount >= prompt?.word_limit * 0.8) return 'text-green-600';\n    if (wordCount >= prompt?.word_limit * 0.5) return 'text-yellow-600';\n    return 'text-gray-600';\n  };\n\n  if (gameState === 'loading') {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-pink-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading writing prompt...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-pink-50 p-4\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-800 mb-2\">Creative Writing</h1>\n          <p className=\"text-gray-600\">Unleash your creativity and compete with AI storytelling</p>\n        </div>\n\n        {/* Writing Interface */}\n        {(gameState === 'writing' || gameState === 'submitted') && (\n          <div className=\"bg-white rounded-xl shadow-lg p-8 mb-6\">\n            {/* Prompt */}\n            <div className=\"mb-6 p-6 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border-l-4 border-purple-500\">\n              <h2 className=\"text-lg font-semibold text-gray-800 mb-2\">Writing Prompt</h2>\n              <p className=\"text-gray-700 text-lg italic\">{prompt?.prompt}</p>\n            </div>\n\n            {/* Stats Bar */}\n            <div className=\"flex justify-between items-center mb-4 p-4 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center space-x-6\">\n                <div>\n                  <span className=\"text-sm font-medium text-gray-500\">Words: </span>\n                  <span className={`text-lg font-bold ${getProgressColor()}`}>\n                    {wordCount}/{prompt?.word_limit}\n                  </span>\n                </div>\n                <div className=\"w-32 bg-gray-200 rounded-full h-2\">\n                  <div \n                    className=\"bg-purple-500 h-2 rounded-full transition-all duration-300\"\n                    style={{ width: `${Math.min((wordCount / prompt?.word_limit) * 100, 100)}%` }}\n                  ></div>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-2xl font-mono font-bold text-purple-600\">\n                  {formatTime(timeLeft)}\n                </div>\n                <div className=\"text-sm text-gray-500\">Time remaining</div>\n              </div>\n            </div>\n\n            {/* Text Editor */}\n            <div className=\"mb-6\">\n              <textarea\n                value={userWriting}\n                onChange={(e) => setUserWriting(e.target.value)}\n                placeholder=\"Start writing your story here...\"\n                className=\"w-full h-80 p-4 border-2 border-gray-300 rounded-lg focus:border-purple-500 focus:outline-none resize-none font-serif text-lg leading-relaxed\"\n                disabled={gameState !== 'writing'}\n              />\n            </div>\n\n            {gameState === 'writing' && (\n              <div className=\"flex justify-center space-x-4\">\n                <button\n                  onClick={handleSubmit}\n                  disabled={userWriting.trim().length === 0}\n                  className=\"px-8 py-3 bg-purple-600 text-white rounded-lg font-medium hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                >\n                  Submit Writing\n                </button>\n                <button\n                  onClick={loadPrompt}\n                  className=\"px-8 py-3 bg-gray-600 text-white rounded-lg font-medium hover:bg-gray-700 transition-colors\"\n                >\n                  New Prompt\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Results */}\n        {gameState === 'results' && results && (\n          <div className=\"bg-white rounded-xl shadow-lg p-8\">\n            <h2 className=\"text-2xl font-bold text-center mb-8\">Writing Comparison</h2>\n            \n            {/* Score Comparison */}\n            <div className=\"grid md:grid-cols-2 gap-6 mb-8\">\n              <div className=\"text-center p-6 bg-purple-50 rounded-lg\">\n                <h3 className=\"text-lg font-semibold mb-2\">Your Score</h3>\n                <div className=\"text-4xl font-bold text-purple-600\">{Math.round(results.user_score)}</div>\n                <p className=\"text-gray-600 mt-2\">Words: {results.word_count}</p>\n                <p className=\"text-gray-600\">Creativity Rating</p>\n              </div>\n              \n              <div className=\"text-center p-6 bg-blue-50 rounded-lg\">\n                <h3 className=\"text-lg font-semibold mb-2\">AI Score</h3>\n                <div className=\"text-4xl font-bold text-blue-600\">{results.ai_score}</div>\n                <p className=\"text-gray-600 mt-2\">AI Baseline</p>\n                <p className=\"text-gray-600\">Standard Performance</p>\n              </div>\n            </div>\n\n            {/* Feedback */}\n            <div className=\"mb-8 p-6 bg-gradient-to-r from-green-50 to-blue-50 rounded-lg border-l-4 border-green-500\">\n              <h3 className=\"text-lg font-semibold mb-2\">Feedback</h3>\n              <p className=\"text-gray-700\">{results.feedback}</p>\n            </div>\n\n            {/* Writing Comparison */}\n            <div className=\"grid md:grid-cols-2 gap-6 mb-8\">\n              <div>\n                <h3 className=\"text-lg font-semibold mb-4 text-purple-600\">Your Writing</h3>\n                <div className=\"p-4 bg-purple-50 rounded-lg h-64 overflow-y-auto\">\n                  <p className=\"text-gray-700 font-serif leading-relaxed\">{results.user_writing}</p>\n                </div>\n              </div>\n              \n              <div>\n                <h3 className=\"text-lg font-semibold mb-4 text-blue-600\">AI Writing</h3>\n                <div className=\"p-4 bg-blue-50 rounded-lg h-64 overflow-y-auto\">\n                  <p className=\"text-gray-700 font-serif leading-relaxed\">{results.ai_writing}</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex justify-center space-x-4\">\n              <button\n                onClick={loadPrompt}\n                className=\"px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n              >\n                Try Another Prompt\n              </button>\n              <button\n                onClick={() => window.history.back()}\n                className=\"px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\"\n              >\n                Back to Dashboard\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GameCreativeWriting;","size_bytes":9045},"frontend/src/components/games/GameLogicalReasoning.js":{"content":"import React, { useState, useEffect, useContext } from 'react';\nimport { AuthContext, API } from '../../App';\nimport axios from 'axios';\n\nconst GameLogicalReasoning = () => {\n  const { user } = useContext(AuthContext);\n  const [puzzle, setPuzzle] = useState(null);\n  const [aiBaseline, setAiBaseline] = useState(null);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [selectedOption, setSelectedOption] = useState('');\n  const [gameState, setGameState] = useState('loading'); // loading, playing, submitted, results\n  const [timeLeft, setTimeLeft] = useState(120); // 2 minutes\n  const [results, setResults] = useState(null);\n  const [difficulty, setDifficulty] = useState(1);\n\n  useEffect(() => {\n    loadPuzzle();\n  }, [difficulty]);\n\n  useEffect(() => {\n    if (gameState === 'playing' && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      return () => clearTimeout(timer);\n    } else if (timeLeft === 0 && gameState === 'playing') {\n      handleSubmit();\n    }\n  }, [timeLeft, gameState]);\n\n  const loadPuzzle = async () => {\n    try {\n      setGameState('loading');\n      const response = await axios.get(`${API}/games/logical-reasoning/data?difficulty=${difficulty}`);\n      setPuzzle(response.data.puzzle);\n      setAiBaseline(response.data.ai_baseline);\n      setGameState('playing');\n      setTimeLeft(120);\n      setUserAnswer('');\n      setSelectedOption('');\n    } catch (error) {\n      console.error('Error loading puzzle:', error);\n    }\n  };\n\n  const handleSubmit = async () => {\n    try {\n      setGameState('submitted');\n      const startTime = 120 - timeLeft;\n      const answer = puzzle.type === 'pattern_matching' || puzzle.type === 'logic_grid' \n        ? selectedOption \n        : userAnswer;\n\n      const response = await axios.post(`${API}/games/logical-reasoning/submit`, {\n        puzzle_id: puzzle.id,\n        user_answer: answer,\n        time_taken: startTime\n      });\n\n      setResults(response.data);\n      setGameState('results');\n    } catch (error) {\n      console.error('Error submitting answer:', error);\n    }\n  };\n\n  const formatTime = (seconds) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const renderPuzzleContent = () => {\n    if (!puzzle) return null;\n\n    switch (puzzle.type) {\n      case 'number_sequence':\n        return (\n          <div className=\"space-y-4\">\n            <p className=\"text-lg font-medium\">{puzzle.question}</p>\n            <input\n              type=\"number\"\n              value={userAnswer}\n              onChange={(e) => setUserAnswer(e.target.value)}\n              className=\"w-full p-3 border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:outline-none\"\n              placeholder=\"Enter your answer\"\n              disabled={gameState !== 'playing'}\n            />\n          </div>\n        );\n\n      case 'pattern_matching':\n        return (\n          <div className=\"space-y-4\">\n            <p className=\"text-lg font-medium\">{puzzle.question}</p>\n            <div className=\"text-2xl font-mono tracking-wider text-center p-4 bg-gray-100 rounded-lg\">\n              {puzzle.pattern}\n            </div>\n            <div className=\"grid grid-cols-2 gap-3\">\n              {puzzle.options.map((option, index) => (\n                <button\n                  key={index}\n                  onClick={() => setSelectedOption(option)}\n                  className={`p-3 rounded-lg border-2 text-lg font-medium transition-colors ${\n                    selectedOption === option\n                      ? 'border-blue-500 bg-blue-50'\n                      : 'border-gray-300 hover:border-gray-400'\n                  }`}\n                  disabled={gameState !== 'playing'}\n                >\n                  {option}\n                </button>\n              ))}\n            </div>\n          </div>\n        );\n\n      case 'logic_grid':\n        return (\n          <div className=\"space-y-4\">\n            <p className=\"text-lg font-medium\">{puzzle.question}</p>\n            <div className=\"space-y-2\">\n              {puzzle.options.map((option, index) => (\n                <button\n                  key={index}\n                  onClick={() => setSelectedOption(option)}\n                  className={`w-full p-3 text-left rounded-lg border-2 transition-colors ${\n                    selectedOption === option\n                      ? 'border-blue-500 bg-blue-50'\n                      : 'border-gray-300 hover:border-gray-400'\n                  }`}\n                  disabled={gameState !== 'playing'}\n                >\n                  {option}\n                </button>\n              ))}\n            </div>\n          </div>\n        );\n\n      default:\n        return <p>Unknown puzzle type</p>;\n    }\n  };\n\n  if (gameState === 'loading') {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-indigo-50 to-purple-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading puzzle...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-indigo-50 to-purple-50 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-800 mb-2\">Logical Reasoning</h1>\n          <p className=\"text-gray-600\">Challenge your logic against AI reasoning</p>\n        </div>\n\n        {/* Game Info */}\n        <div className=\"bg-white rounded-xl shadow-lg p-6 mb-6\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm font-medium text-gray-500\">Difficulty:</span>\n              <select\n                value={difficulty}\n                onChange={(e) => setDifficulty(parseInt(e.target.value))}\n                className=\"border rounded px-3 py-1\"\n                disabled={gameState === 'playing'}\n              >\n                <option value={1}>Easy</option>\n                <option value={2}>Medium</option>\n                <option value={3}>Hard</option>\n              </select>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-mono font-bold text-indigo-600\">\n                {formatTime(timeLeft)}\n              </div>\n              <div className=\"text-sm text-gray-500\">Time remaining</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Puzzle Content */}\n        <div className=\"bg-white rounded-xl shadow-lg p-8 mb-6\">\n          {renderPuzzleContent()}\n          \n          {gameState === 'playing' && (\n            <div className=\"mt-6 flex justify-center\">\n              <button\n                onClick={handleSubmit}\n                disabled={\n                  (puzzle.type === 'number_sequence' && !userAnswer) ||\n                  ((puzzle.type === 'pattern_matching' || puzzle.type === 'logic_grid') && !selectedOption)\n                }\n                className=\"px-8 py-3 bg-indigo-600 text-white rounded-lg font-medium hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n              >\n                Submit Answer\n              </button>\n            </div>\n          )}\n        </div>\n\n        {/* Results */}\n        {gameState === 'results' && results && (\n          <div className=\"bg-white rounded-xl shadow-lg p-8 mb-6\">\n            <h2 className=\"text-2xl font-bold text-center mb-6\">Results</h2>\n            \n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-semibold mb-2\">Your Performance</h3>\n                <div className={`text-3xl font-bold ${results.correct ? 'text-green-600' : 'text-red-600'}`}>\n                  {results.correct ? '‚úì Correct' : '‚úó Incorrect'}\n                </div>\n                <p className=\"text-gray-600 mt-2\">Score: {results.score}</p>\n                <p className=\"text-gray-600\">Accuracy: {results.accuracy}%</p>\n              </div>\n              \n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-semibold mb-2\">AI Performance</h3>\n                <div className=\"text-3xl font-bold text-blue-600\">\n                  {aiBaseline?.ai_confidence ? Math.round(aiBaseline.ai_confidence * 100) : 90}%\n                </div>\n                <p className=\"text-gray-600 mt-2\">AI Confidence</p>\n                <p className=\"text-gray-600\">Baseline Score: {Math.round(aiBaseline?.ai_confidence * 100) || 90}</p>\n              </div>\n            </div>\n\n            <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n              <p className=\"text-center text-gray-700\">{results.explanation}</p>\n            </div>\n\n            <div className=\"mt-6 flex justify-center space-x-4\">\n              <button\n                onClick={loadPuzzle}\n                className=\"px-6 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors\"\n              >\n                Try Another Puzzle\n              </button>\n              <button\n                onClick={() => window.history.back()}\n                className=\"px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors\"\n              >\n                Back to Dashboard\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GameLogicalReasoning;","size_bytes":9672},"frontend/src/components/games/GameMemory.js":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { API } from '../../App';\nimport { ArrowLeft, Brain, Clock, Target, CheckCircle, XCircle, RotateCcw, Play } from 'lucide-react';\n\nconst GameMemory = () => {\n  const [gameData, setGameData] = useState(null);\n  const [gameState, setGameState] = useState('loading'); // loading, showing, memorizing, input, finished\n  const [sequence, setSequence] = useState([]);\n  const [userInput, setUserInput] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [score, setScore] = useState(0);\n  const [level, setLevel] = useState(1);\n  const [lives, setLives] = useState(3);\n  const [showingSequence, setShowingSequence] = useState(false);\n  const [activeIndex, setActiveIndex] = useState(-1);\n  const [startTime, setStartTime] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [mistakes, setMistakes] = useState(0);\n  \n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchGameData();\n  }, []);\n\n  useEffect(() => {\n    if (gameState === 'input' && timeLeft > 0) {\n      const timer = setTimeout(() => {\n        setTimeLeft(timeLeft - 1);\n      }, 1000);\n      return () => clearTimeout(timer);\n    } else if (gameState === 'input' && timeLeft === 0) {\n      handleGameOver();\n    }\n  }, [gameState, timeLeft]);\n\n  const fetchGameData = async () => {\n    try {\n      const response = await axios.get(`${API}/games/memory/data?difficulty=${level}`);\n      setSequence(response.data.sequence);\n      setGameData(response.data);\n      setGameState('showing');\n      setStartTime(Date.now());\n      showSequence(response.data.sequence);\n    } catch (error) {\n      console.error('Error fetching game data:', error);\n    }\n  };\n\n  const showSequence = async (seq) => {\n    setShowingSequence(true);\n    setActiveIndex(-1);\n    \n    // Wait 1 second before starting\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    for (let i = 0; i < seq.length; i++) {\n      setActiveIndex(i);\n      await new Promise(resolve => setTimeout(resolve, 800));\n      setActiveIndex(-1);\n      await new Promise(resolve => setTimeout(resolve, 200));\n    }\n    \n    setShowingSequence(false);\n    setGameState('input');\n    setTimeLeft(seq.length * 3 + 5); // Give time based on sequence length\n  };\n\n  const handleNumberClick = (number) => {\n    if (gameState !== 'input' || showingSequence) return;\n\n    const newInput = [...userInput, number];\n    setUserInput(newInput);\n    \n    // Check if the input is correct so far\n    const currentIndex = newInput.length - 1;\n    if (sequence[currentIndex] !== number) {\n      // Wrong input\n      setMistakes(mistakes + 1);\n      setLives(lives - 1);\n      \n      if (lives <= 1) {\n        handleGameOver();\n        return;\n      }\n      \n      // Show mistake and restart current level\n      setTimeout(() => {\n        setUserInput([]);\n        showSequence(sequence);\n      }, 1000);\n      return;\n    }\n    \n    // Check if sequence is complete\n    if (newInput.length === sequence.length) {\n      // Level complete!\n      const timeBonus = Math.max(0, timeLeft * 10);\n      const levelBonus = level * 50;\n      const perfectBonus = mistakes === 0 ? 100 : 0;\n      \n      setScore(score + 200 + timeBonus + levelBonus + perfectBonus);\n      \n      if (level < 5) {\n        // Next level\n        setTimeout(() => {\n          setLevel(level + 1);\n          setUserInput([]);\n          setCurrentStep(0);\n          fetchGameData();\n        }, 2000);\n      } else {\n        // Game complete\n        setTimeout(() => {\n          finishGame();\n        }, 2000);\n      }\n    }\n  };\n\n  const handleGameOver = () => {\n    finishGame();\n  };\n\n  const finishGame = async () => {\n    const endTime = Date.now();\n    const totalTime = Math.round((endTime - startTime) / 1000);\n    const accuracy = Math.max(0, ((level - 1) * 100 - mistakes * 20)) / (level * 100) * 100;\n\n    setGameState('finished');\n\n    try {\n      const response = await axios.post(`${API}/games/score`, {\n        game_type: 'memory_challenge',\n        score: score,\n        accuracy: accuracy,\n        time_taken: totalTime\n      });\n      \n      console.log('Score submitted:', response.data);\n    } catch (error) {\n      console.error('Error submitting score:', error);\n    }\n  };\n\n  const restartGame = () => {\n    setLevel(1);\n    setScore(0);\n    setLives(3);\n    setMistakes(0);\n    setUserInput([]);\n    setCurrentStep(0);\n    fetchGameData();\n  };\n\n  if (gameState === 'loading') {\n    return (\n      <div className=\"game-container\">\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-cyan-400\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (gameState === 'finished') {\n    const accuracy = Math.max(0, ((level - 1) * 100 - mistakes * 20)) / (level * 100) * 100;\n    const aiBaselineScore = Math.round(score * 0.783); // Simulated AI baseline\n\n    return (\n      <div className=\"game-container\">\n        <div className=\"game-content\">\n          <Link \n            to=\"/dashboard\"\n            className=\"inline-flex items-center gap-2 text-slate-400 hover:text-cyan-400 transition-colors mb-6\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            Back to Dashboard\n          </Link>\n\n          <div className=\"results-screen\">\n            <h1 className=\"results-title\">Memory Challenge Complete!</h1>\n            \n            <div className=\"results-comparison\">\n              <div className=\"comparison-item\">\n                <div className=\"comparison-label\">Your Performance</div>\n                <div className=\"comparison-score\">{score}</div>\n                <div className=\"text-sm text-slate-400 mt-2\">\n                  Level {level} reached ({accuracy.toFixed(1)}% accuracy)\n                </div>\n              </div>\n              \n              <div className=\"comparison-item ai\">\n                <div className=\"comparison-label\">AI Baseline</div>\n                <div className=\"comparison-score\">{aiBaselineScore}</div>\n                <div className=\"text-sm text-slate-400 mt-2\">\n                  Gemini 2.5 Pro Performance (78.3% accuracy)\n                </div>\n              </div>\n            </div>\n\n            <div className=\"mt-6\">\n              {score > aiBaselineScore ? (\n                <div className=\"flex items-center justify-center gap-2 text-green-400 text-lg font-semibold\">\n                  <CheckCircle className=\"w-6 h-6\" />\n                  Incredible! Your memory beats AI processing!\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center gap-2 text-purple-400 text-lg font-semibold\">\n                  <Brain className=\"w-6 h-6\" />\n                  AI's computational memory was stronger. Keep training!\n                </div>\n              )}\n            </div>\n\n            <div className=\"mt-6 grid grid-cols-2 gap-4 text-center\">\n              <div className=\"bg-slate-800/50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-cyan-400\">{level}</div>\n                <div className=\"text-sm text-slate-400\">Max Level</div>\n              </div>\n              <div className=\"bg-slate-800/50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-400\">{Math.max(0, 3 - mistakes)}</div>\n                <div className=\"text-sm text-slate-400\">Lives Remaining</div>\n              </div>\n            </div>\n\n            <div className=\"flex gap-4 justify-center mt-8\">\n              <button \n                onClick={restartGame}\n                className=\"px-6 py-3 bg-gradient-to-r from-cyan-500 to-purple-600 text-white rounded-lg hover:shadow-lg transition-all font-medium\"\n              >\n                <RotateCcw className=\"w-4 h-4 mr-2\" />\n                Train Again\n              </button>\n              <Link \n                to=\"/dashboard\"\n                className=\"px-6 py-3 border border-slate-600 text-slate-300 rounded-lg hover:border-cyan-400 hover:text-cyan-400 transition-all font-medium\"\n              >\n                Dashboard\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"game-content\">\n        <Link \n          to=\"/dashboard\"\n          className=\"inline-flex items-center gap-2 text-slate-400 hover:text-cyan-400 transition-colors mb-6\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n          Back to Dashboard\n        </Link>\n\n        <div className=\"game-header\">\n          <h1 className=\"game-title-main\">Memory Challenge</h1>\n          <p className=\"game-subtitle\">Remember the sequence and repeat it back. How far can your memory go?</p>\n        </div>\n\n        <div className=\"game-stats\">\n          <div className=\"stat-item\">\n            <div className=\"stat-label\">Score</div>\n            <div className=\"stat-value\">{score}</div>\n          </div>\n          <div className=\"stat-item\">\n            <div className=\"stat-label\">Level</div>\n            <div className=\"stat-value\">{level}</div>\n          </div>\n          <div className=\"stat-item\">\n            <div className=\"stat-label\">Lives</div>\n            <div className=\"stat-value text-red-400\">‚ù§Ô∏è {lives}</div>\n          </div>\n          {gameState === 'input' && (\n            <div className=\"stat-item\">\n              <div className=\"stat-label\">Time</div>\n              <div className={`stat-value ${timeLeft <= 10 ? 'text-red-400' : ''}`}>\n                {timeLeft}s\n              </div>\n            </div>\n          )}\n        </div>\n\n        <div className=\"game-area\">\n          <div className=\"text-center mb-8\">\n            {gameState === 'showing' ? (\n              <div>\n                <h3 className=\"text-xl font-semibold text-white mb-4\">\n                  üìñ Memorize this sequence\n                </h3>\n                <p className=\"text-slate-400\">Watch carefully and remember the order...</p>\n              </div>\n            ) : gameState === 'input' ? (\n              <div>\n                <h3 className=\"text-xl font-semibold text-white mb-4\">\n                  üß† Now repeat the sequence\n                </h3>\n                <p className=\"text-slate-400\">\n                  Click the numbers in the correct order ({userInput.length}/{sequence.length})\n                </p>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Memory Grid */}\n          <div className=\"memory-sequence\">\n            {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((number, index) => (\n              <div\n                key={number}\n                className={`memory-tile ${\n                  showingSequence && sequence[activeIndex] === number ? 'active' : ''\n                } ${\n                  userInput.includes(number) ? 'user-input' : ''\n                } ${\n                  gameState === 'input' && userInput.length > 0 && \n                  userInput[userInput.length - 1] !== sequence[userInput.length - 1] && \n                  userInput.includes(number) ? 'incorrect' : ''\n                }`}\n                onClick={() => handleNumberClick(number)}\n                style={{\n                  cursor: gameState === 'input' && !showingSequence ? 'pointer' : 'default',\n                  pointerEvents: gameState === 'input' && !showingSequence ? 'auto' : 'none'\n                }}\n              >\n                {number}\n              </div>\n            ))}\n          </div>\n\n          {/* Sequence Display */}\n          <div className=\"mt-8 text-center\">\n            <div className=\"text-slate-400 mb-2\">Current Sequence Length: {sequence.length}</div>\n            {gameState === 'input' && (\n              <div className=\"text-slate-300\">\n                Your input: {userInput.join(' ‚Üí ') || 'None yet'}\n              </div>\n            )}\n          </div>\n\n          {/* Instructions */}\n          <div className=\"mt-8 bg-cyan-500/10 border border-cyan-500/20 rounded-lg p-4\">\n            <h4 className=\"text-cyan-400 font-semibold mb-2\">üéØ How to Play</h4>\n            <ul className=\"text-slate-300 text-sm space-y-1\">\n              <li>‚Ä¢ Watch the sequence of numbers light up</li>\n              <li>‚Ä¢ Remember the exact order</li>\n              <li>‚Ä¢ Click the numbers in the same sequence</li>\n              <li>‚Ä¢ Each level adds more numbers to remember</li>\n              <li>‚Ä¢ You have 3 lives - don't make mistakes!</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GameMemory;","size_bytes":12682},"frontend/src/components/games/GameTextAI.js":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { API } from '../../App';\nimport { ArrowLeft, FileText, Brain, Clock, Target, CheckCircle, XCircle, User } from 'lucide-react';\n\nconst GameTextAI = () => {\n  const [gameData, setGameData] = useState(null);\n  const [currentTextIndex, setCurrentTextIndex] = useState(0);\n  const [score, setScore] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [gameState, setGameState] = useState('loading'); // loading, playing, finished\n  const [timeLeft, setTimeLeft] = useState(45);\n  const [startTime, setStartTime] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [showResult, setShowResult] = useState(false);\n  \n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchGameData();\n  }, []);\n\n  useEffect(() => {\n    if (gameState === 'playing' && timeLeft > 0) {\n      const timer = setTimeout(() => {\n        setTimeLeft(timeLeft - 1);\n      }, 1000);\n      return () => clearTimeout(timer);\n    } else if (gameState === 'playing' && timeLeft === 0) {\n      handleAnswer(null); // Time's up, auto-submit\n    }\n  }, [gameState, timeLeft]);\n\n  const fetchGameData = async () => {\n    try {\n      const response = await axios.get(`${API}/games/text-ai/data`);\n      setGameData(response.data);\n      setGameState('playing');\n      setStartTime(Date.now());\n    } catch (error) {\n      console.error('Error fetching game data:', error);\n    }\n  };\n\n  const handleAnswer = async (isAI) => {\n    if (selectedAnswer !== null || !gameData) return;\n\n    const currentText = gameData.texts[currentTextIndex];\n    const isCorrect = isAI === currentText.is_ai;\n    \n    setSelectedAnswer(isAI);\n    setShowResult(true);\n    \n    const newAnswer = {\n      textId: currentText.id,\n      userAnswer: isAI,\n      correctAnswer: currentText.is_ai,\n      isCorrect: isCorrect,\n      timeSpent: 45 - timeLeft\n    };\n    \n    const updatedAnswers = [...answers, newAnswer];\n    setAnswers(updatedAnswers);\n    \n    if (isCorrect) {\n      const timeBonus = Math.max(0, timeLeft * 2);\n      setScore(score + 100 + timeBonus);\n    }\n\n    // Wait 3 seconds to show result, then move to next text\n    setTimeout(() => {\n      if (currentTextIndex < gameData.texts.length - 1) {\n        setCurrentTextIndex(currentTextIndex + 1);\n        setSelectedAnswer(null);\n        setShowResult(false);\n        setTimeLeft(45);\n      } else {\n        finishGame(updatedAnswers);\n      }\n    }, 3000);\n  };\n\n  const finishGame = async (finalAnswers) => {\n    const endTime = Date.now();\n    const totalTime = Math.round((endTime - startTime) / 1000);\n    const correctAnswers = finalAnswers.filter(a => a.isCorrect).length;\n    const accuracy = (correctAnswers / finalAnswers.length) * 100;\n\n    setGameState('finished');\n\n    try {\n      const response = await axios.post(`${API}/games/score`, {\n        game_type: 'text_ai',\n        score: score,\n        accuracy: accuracy,\n        time_taken: totalTime\n      });\n      \n      console.log('Score submitted:', response.data);\n    } catch (error) {\n      console.error('Error submitting score:', error);\n    }\n  };\n\n  const restartGame = () => {\n    setCurrentTextIndex(0);\n    setScore(0);\n    setAnswers([]);\n    setTimeLeft(45);\n    setSelectedAnswer(null);\n    setShowResult(false);\n    fetchGameData();\n  };\n\n  if (gameState === 'loading' || !gameData) {\n    return (\n      <div className=\"game-container\">\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-cyan-400\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (gameState === 'finished') {\n    const correctAnswers = answers.filter(a => a.isCorrect).length;\n    const accuracy = (correctAnswers / answers.length) * 100;\n    const aiBaselineScore = Math.round(score * 0.887); // Simulated AI baseline\n\n    return (\n      <div className=\"game-container\">\n        <div className=\"game-content\">\n          <Link \n            to=\"/dashboard\"\n            className=\"inline-flex items-center gap-2 text-slate-400 hover:text-cyan-400 transition-colors mb-6\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            Back to Dashboard\n          </Link>\n\n          <div className=\"results-screen\">\n            <h1 className=\"results-title\">Text Analysis Complete!</h1>\n            \n            <div className=\"results-comparison\">\n              <div className=\"comparison-item\">\n                <div className=\"comparison-label\">Your Performance</div>\n                <div className=\"comparison-score\">{score}</div>\n                <div className=\"text-sm text-slate-400 mt-2\">\n                  {correctAnswers}/{answers.length} correct ({accuracy.toFixed(1)}% accuracy)\n                </div>\n              </div>\n              \n              <div className=\"comparison-item ai\">\n                <div className=\"comparison-label\">AI Baseline</div>\n                <div className=\"comparison-score\">{aiBaselineScore}</div>\n                <div className=\"text-sm text-slate-400 mt-2\">\n                  Claude Sonnet 4 Performance (88.7% accuracy)\n                </div>\n              </div>\n            </div>\n\n            <div className=\"mt-6\">\n              {score > aiBaselineScore ? (\n                <div className=\"flex items-center justify-center gap-2 text-green-400 text-lg font-semibold\">\n                  <CheckCircle className=\"w-6 h-6\" />\n                  Amazing! Your text analysis skills beat AI!\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center gap-2 text-purple-400 text-lg font-semibold\">\n                  <Brain className=\"w-6 h-6\" />\n                  AI had the edge this time. Practice makes perfect!\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex gap-4 justify-center mt-8\">\n              <button \n                onClick={restartGame}\n                className=\"px-6 py-3 bg-gradient-to-r from-cyan-500 to-purple-600 text-white rounded-lg hover:shadow-lg transition-all font-medium\"\n              >\n                Analyze More Text\n              </button>\n              <Link \n                to=\"/dashboard\"\n                className=\"px-6 py-3 border border-slate-600 text-slate-300 rounded-lg hover:border-cyan-400 hover:text-cyan-400 transition-all font-medium\"\n              >\n                Dashboard\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const currentText = gameData.texts[currentTextIndex];\n  const progress = ((currentTextIndex + 1) / gameData.texts.length) * 100;\n\n  return (\n    <div className=\"game-container\">\n      <div className=\"game-content\">\n        <Link \n          to=\"/dashboard\"\n          className=\"inline-flex items-center gap-2 text-slate-400 hover:text-cyan-400 transition-colors mb-6\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n          Back to Dashboard\n        </Link>\n\n        <div className=\"game-header\">\n          <h1 className=\"game-title-main\">Text vs AI Detection</h1>\n          <p className=\"game-subtitle\">Can you identify human writing from AI-generated text?</p>\n        </div>\n\n        <div className=\"game-stats\">\n          <div className=\"stat-item\">\n            <div className=\"stat-label\">Score</div>\n            <div className=\"stat-value\">{score}</div>\n          </div>\n          <div className=\"stat-item\">\n            <div className=\"stat-label\">Text</div>\n            <div className=\"stat-value\">{currentTextIndex + 1}/{gameData.texts.length}</div>\n          </div>\n          <div className=\"stat-item\">\n            <div className=\"stat-label\">Time</div>\n            <div className={`stat-value ${timeLeft <= 15 ? 'text-red-400' : ''}`}>\n              {timeLeft}s\n            </div>\n          </div>\n        </div>\n\n        <div className=\"game-progress\">\n          <div className=\"progress-bar\">\n            <div className=\"progress-fill\" style={{ width: `${progress}%` }}></div>\n          </div>\n          <p className=\"text-slate-400 text-sm mt-2\">Progress: {Math.round(progress)}%</p>\n        </div>\n\n        <div className=\"game-area\">\n          <div className=\"bg-slate-800 p-6 rounded-xl mb-6 border border-slate-700\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <FileText className=\"w-5 h-5 text-cyan-400\" />\n              <span className=\"text-slate-400 font-medium\">Text Sample {currentTextIndex + 1}</span>\n            </div>\n            <div className=\"text-white text-lg leading-relaxed font-mono bg-slate-900 p-4 rounded-lg border border-slate-600\">\n              \"{currentText.text}\"\n            </div>\n          </div>\n          \n          <div className=\"text-center mb-6\">\n            <h3 className=\"text-xl font-semibold text-white mb-2\">\n              Was this text written by a human or AI?\n            </h3>\n            <p className=\"text-slate-400\">Analyze the writing style, patterns, and authenticity</p>\n          </div>\n\n          {showResult ? (\n            <div className=\"text-center\">\n              <div className={`text-2xl font-bold mb-4 ${selectedAnswer === currentText.is_ai ? 'text-green-400' : 'text-red-400'}`}>\n                {selectedAnswer === currentText.is_ai ? 'Correct!' : 'Incorrect!'}\n              </div>\n              <div className=\"text-slate-400 mb-2\">\n                This text was written by: <span className=\"text-white font-semibold\">{currentText.source}</span>\n              </div>\n              <div className=\"text-sm text-slate-500\">\n                {currentText.is_ai ? 'AI models often use certain patterns and phrases' : 'Human writing has unique personal touches and imperfections'}\n              </div>\n            </div>\n          ) : (\n            <div className=\"game-options\">\n              <button \n                onClick={() => handleAnswer(false)}\n                className=\"game-option-btn\"\n                disabled={selectedAnswer !== null}\n              >\n                <User className=\"w-5 h-5 mr-2\" />\n                Human Written\n              </button>\n              <button \n                onClick={() => handleAnswer(true)}\n                className=\"game-option-btn\"\n                disabled={selectedAnswer !== null}\n              >\n                <Brain className=\"w-5 h-5 mr-2\" />\n                AI Generated\n              </button>\n            </div>\n          )}\n        </div>\n\n        {/* Hint Section */}\n        <div className=\"mt-8 bg-cyan-500/10 border border-cyan-500/20 rounded-lg p-4\">\n          <h4 className=\"text-cyan-400 font-semibold mb-2\">üí° Detection Tips</h4>\n          <ul className=\"text-slate-300 text-sm space-y-1\">\n            <li>‚Ä¢ AI text often lacks personal anecdotes or specific details</li>\n            <li>‚Ä¢ Look for overly formal language or repetitive patterns</li>\n            <li>‚Ä¢ Human writing has natural imperfections and emotional depth</li>\n            <li>‚Ä¢ AI may use generic phrases like \"it's worth noting\" or \"it's important to\"</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GameTextAI;","size_bytes":11243},"frontend/src/components/ui/accordion.jsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item ref={ref} className={cn(\"border-b\", className)} {...props} />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}>\n      {children}\n      <ChevronDown\n        className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}>\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1619},"frontend/src/components/ui/alert-dialog.jsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"../../lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref} />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props} />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col space-y-2 text-center sm:text-left\", className)}\n    {...props} />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)}\n    {...props} />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title ref={ref} className={cn(\"text-lg font-semibold\", className)} {...props} />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(buttonVariants({ variant: \"outline\" }), \"mt-2 sm:mt-0\", className)}\n    {...props} />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":3465},"frontend/src/components/ui/alert.jsx":{"content":"import * as React from \"react\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"../../lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props} />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props} />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props} />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1339},"frontend/src/components/ui/aspect-ratio.jsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"frontend/src/components/ui/avatar.jsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Avatar = React.forwardRef(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\", className)}\n    {...props} />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props} />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props} />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1033},"frontend/src/components/ui/badge.jsx":{"content":"import * as React from \"react\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"../../lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  ...props\n}) {\n  return (<div className={cn(badgeVariants({ variant }), className)} {...props} />);\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":994},"frontend/src/components/ui/breadcrumb.jsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Breadcrumb = React.forwardRef(\n  ({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />\n)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props} />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props} />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props} />\n  );\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props} />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}>\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}>\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2273},"frontend/src/components/ui/button.jsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"../../lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n  return (\n    <Comp\n      className={cn(buttonVariants({ variant, size, className }))}\n      ref={ref}\n      {...props} />\n  );\n})\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1666},"frontend/src/components/ui/calendar.jsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"../../lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props} />\n  );\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2853},"frontend/src/components/ui/card.jsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"rounded-xl border bg-card text-card-foreground shadow\", className)}\n    {...props} />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props} />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props} />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1444},"frontend/src/components/ui/carousel.jsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel from \"embla-carousel-react\";\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\nconst CarouselContext = React.createContext(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef((\n  {\n    orientation = \"horizontal\",\n    opts,\n    setApi,\n    plugins,\n    className,\n    children,\n    ...props\n  },\n  ref\n) => {\n  const [carouselRef, api] = useEmblaCarousel({\n    ...opts,\n    axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n  }, plugins)\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n  const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n  const onSelect = React.useCallback((api) => {\n    if (!api) {\n      return\n    }\n\n    setCanScrollPrev(api.canScrollPrev())\n    setCanScrollNext(api.canScrollNext())\n  }, [])\n\n  const scrollPrev = React.useCallback(() => {\n    api?.scrollPrev()\n  }, [api])\n\n  const scrollNext = React.useCallback(() => {\n    api?.scrollNext()\n  }, [api])\n\n  const handleKeyDown = React.useCallback((event) => {\n    if (event.key === \"ArrowLeft\") {\n      event.preventDefault()\n      scrollPrev()\n    } else if (event.key === \"ArrowRight\") {\n      event.preventDefault()\n      scrollNext()\n    }\n  }, [scrollPrev, scrollNext])\n\n  React.useEffect(() => {\n    if (!api || !setApi) {\n      return\n    }\n\n    setApi(api)\n  }, [api, setApi])\n\n  React.useEffect(() => {\n    if (!api) {\n      return\n    }\n\n    onSelect(api)\n    api.on(\"reInit\", onSelect)\n    api.on(\"select\", onSelect)\n\n    return () => {\n      api?.off(\"select\", onSelect)\n    };\n  }, [api, onSelect])\n\n  return (\n    <CarouselContext.Provider\n      value={{\n        carouselRef,\n        api: api,\n        opts,\n        orientation:\n          orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n        scrollPrev,\n        scrollNext,\n        canScrollPrev,\n        canScrollNext,\n      }}>\n      <div\n        ref={ref}\n        onKeyDownCapture={handleKeyDown}\n        className={cn(\"relative\", className)}\n        role=\"region\"\n        aria-roledescription=\"carousel\"\n        {...props}>\n        {children}\n      </div>\n    </CarouselContext.Provider>\n  );\n})\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props} />\n    </div>\n  );\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props} />\n  );\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\"absolute  h-8 w-8 rounded-full\", orientation === \"horizontal\"\n        ? \"-left-12 top-1/2 -translate-y-1/2\"\n        : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\", className)}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}>\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  );\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\"absolute h-8 w-8 rounded-full\", orientation === \"horizontal\"\n        ? \"-right-12 top-1/2 -translate-y-1/2\"\n        : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\", className)}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}>\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  );\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport { Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext };\n","size_bytes":4815},"frontend/src/components/ui/checkbox.jsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Checkbox = React.forwardRef(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}>\n    <CheckboxPrimitive.Indicator className={cn(\"flex items-center justify-center text-current\")}>\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":884},"frontend/src/components/ui/collapsible.jsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"frontend/src/components/ui/command.jsx":{"content":"import * as React from \"react\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props} />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({\n  children,\n  ...props\n}) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command\n          className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nconst CommandInput = React.forwardRef(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props} />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props} />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef((props, ref) => (\n  <CommandPrimitive.Empty ref={ref} className=\"py-6 text-center text-sm\" {...props} />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props} />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator ref={ref} className={cn(\"-mx-1 h-px bg-border\", className)} {...props} />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props} />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)}\n      {...props} />\n  );\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":3897},"frontend/src/components/ui/context-menu.jsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}>\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props} />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props} />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props} />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props} />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props} />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)}\n      {...props} />\n  );\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":6179},"frontend/src/components/ui/dialog.jsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props} />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}>\n      {children}\n      <DialogPrimitive.Close\n        className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className)}\n    {...props} />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)}\n    {...props} />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n    {...props} />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3218},"frontend/src/components/ui/drawer.jsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}) => (\n  <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props} />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}>\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props} />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}) => (\n  <div className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)} {...props} />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n    {...props} />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":2349},"frontend/src/components/ui/dropdown-menu.jsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}>\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props} />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props} />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props} />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className)}\n    {...props} />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props} />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props} />\n  );\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":6349},"frontend/src/components/ui/form.jsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { Controller, FormProvider, useFormContext } from \"react-hook-form\";\n\nimport { cn } from \"../../lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\nconst FormFieldContext = React.createContext({})\n\nconst FormField = (\n  {\n    ...props\n  }\n) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\nconst FormItemContext = React.createContext({})\n\nconst FormItem = React.forwardRef(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  );\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props} />\n  );\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props} />\n  );\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props} />\n  );\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}>\n      {body}\n    </p>\n  );\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":3125},"frontend/src/components/ui/hover-card.jsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props} />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1113},"frontend/src/components/ui/input-otp.jsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst InputOTP = React.forwardRef(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\"flex items-center gap-2 has-[:disabled]:opacity-50\", containerClassName)}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props} />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}>\n      {char}\n      {hasFakeCaret && (\n        <div\n          className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  );\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":1813},"frontend/src/components/ui/input.jsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Input = React.forwardRef(({ className, type, ...props }, ref) => {\n  return (\n    <input\n      type={type}\n      className={cn(\n        \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props} />\n  );\n})\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":692},"frontend/src/components/ui/label.jsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"../../lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":529},"frontend/src/components/ui/menubar.jsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}) {\n  return <MenubarPrimitive.Menu {...props} />;\n}\n\nfunction MenubarGroup({\n  ...props\n}) {\n  return <MenubarPrimitive.Group {...props} />;\n}\n\nfunction MenubarPortal({\n  ...props\n}) {\n  return <MenubarPrimitive.Portal {...props} />;\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}) {\n  return <MenubarPrimitive.RadioGroup {...props} />;\n}\n\nfunction MenubarSub({\n  ...props\n}) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />;\n}\n\nconst Menubar = React.forwardRef(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props} />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props} />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}>\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props} />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef((\n  { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n  ref\n) => (\n  <MenubarPrimitive.Portal>\n    <MenubarPrimitive.Content\n      ref={ref}\n      align={align}\n      alignOffset={alignOffset}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n        className\n      )}\n      {...props} />\n  </MenubarPrimitive.Portal>\n))\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props} />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}>\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", inset && \"pl-8\", className)}\n    {...props} />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props} />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)}\n      {...props} />\n  );\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":6878},"frontend/src/components/ui/navigation-menu.jsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst NavigationMenu = React.forwardRef(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}>\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props} />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}>\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\" />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props} />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props} />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}>\n    <div\n      className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":4303},"frontend/src/components/ui/pagination.jsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\";\n\nconst Pagination = ({\n  className,\n  ...props\n}) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props} />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props} />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(buttonVariants({\n      variant: isActive ? \"outline\" : \"ghost\",\n      size,\n    }), className)}\n    {...props} />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}>\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}>\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}>\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2326},"frontend/src/components/ui/popover.jsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props} />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1220},"frontend/src/components/ui/progress.jsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Progress = React.forwardRef(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}>\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }} />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":657},"frontend/src/components/ui/radio-group.jsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst RadioGroup = React.forwardRef(({ className, ...props }, ref) => {\n  return (<RadioGroupPrimitive.Root className={cn(\"grid gap-2\", className)} {...props} ref={ref} />);\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}>\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  );\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1137},"frontend/src/components/ui/resizable.jsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props} />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}>\n    {withHandle && (\n      <div\n        className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1560},"frontend/src/components/ui/scroll-area.jsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}>\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}>\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1366},"frontend/src/components/ui/select.jsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}>\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}>\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\"flex cursor-default items-center justify-center py-1\", className)}\n    {...props}>\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}>\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\"p-1\", position === \"popper\" &&\n          \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\")}>\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props} />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}>\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props} />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":4773},"frontend/src/components/ui/separator.jsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Separator = React.forwardRef((\n  { className, orientation = \"horizontal\", decorative = true, ...props },\n  ref\n) => (\n  <SeparatorPrimitive.Root\n    ref={ref}\n    decorative={decorative}\n    orientation={orientation}\n    className={cn(\n      \"shrink-0 bg-border\",\n      orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n      className\n    )}\n    {...props} />\n))\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":604},"frontend/src/components/ui/sheet.jsx":{"content":"import * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva } from \"class-variance-authority\";\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref} />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\nconst SheetContent = React.forwardRef(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>\n      <SheetPrimitive.Close\n        className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col space-y-2 text-center sm:text-left\", className)}\n    {...props} />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)}\n    {...props} />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props} />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":3539},"frontend/src/components/ui/skeleton.jsx":{"content":"import { cn } from \"../../lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props} />\n  );\n}\n\nexport { Skeleton }\n","size_bytes":229},"frontend/src/components/ui/slider.jsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Slider = React.forwardRef(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\"relative flex w-full touch-none select-none items-center\", className)}\n    {...props}>\n    <SliderPrimitive.Track\n      className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb\n      className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":918},"frontend/src/components/ui/sonner.jsx":{"content":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\nconst Toaster = ({\n  ...props\n}) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props} />\n  );\n}\n\nexport { Toaster }\n","size_bytes":783},"frontend/src/components/ui/switch.jsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Switch = React.forwardRef(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}>\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )} />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1029},"frontend/src/components/ui/table.jsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Table = React.forwardRef(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props} />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props} />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\", className)}\n    {...props} />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props} />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props} />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props} />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2235},"frontend/src/components/ui/tabs.jsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props} />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props} />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props} />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1533},"frontend/src/components/ui/textarea.jsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst Textarea = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props} />\n  );\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":589},"frontend/src/components/ui/toast.jsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva } from \"class-variance-authority\";\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props} />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props} />\n  );\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props} />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}>\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold [&+div]:text-xs\", className)}\n    {...props} />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description ref={ref} className={cn(\"text-sm opacity-90\", className)} {...props} />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\nexport { ToastProvider, ToastViewport, Toast, ToastTitle, ToastDescription, ToastClose, ToastAction };\n","size_bytes":3833},"frontend/src/components/ui/toaster.jsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n","size_bytes":774},"frontend/src/components/ui/toggle-group.jsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\n\nimport { cn } from \"../../lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}>\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(toggleVariants({\n        variant: context.variant || variant,\n        size: context.size || size,\n      }), className)}\n      {...props}>\n      {children}\n    </ToggleGroupPrimitive.Item>\n  );\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1272},"frontend/src/components/ui/toggle.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"../../lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props} />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1328},"frontend/src/components/ui/tooltip.jsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"../../lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n        className\n      )}\n      {...props} />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1131}},"version":1}